// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/Maksim646/space_vpx_satellite/internal/api/definition"
)

// LoadTestDataOKCode is the HTTP code returned for type LoadTestDataOK
const LoadTestDataOKCode int = 200

/*
LoadTestDataOK Load Test Data response

swagger:response loadTestDataOK
*/
type LoadTestDataOK struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewLoadTestDataOK creates LoadTestDataOK with default headers values
func NewLoadTestDataOK() *LoadTestDataOK {

	return &LoadTestDataOK{}
}

// WithPayload adds the payload to the load test data o k response
func (o *LoadTestDataOK) WithPayload(payload *models.Error) *LoadTestDataOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the load test data o k response
func (o *LoadTestDataOK) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *LoadTestDataOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// LoadTestDataBadRequestCode is the HTTP code returned for type LoadTestDataBadRequest
const LoadTestDataBadRequestCode int = 400

/*
LoadTestDataBadRequest Bad request

swagger:response loadTestDataBadRequest
*/
type LoadTestDataBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewLoadTestDataBadRequest creates LoadTestDataBadRequest with default headers values
func NewLoadTestDataBadRequest() *LoadTestDataBadRequest {

	return &LoadTestDataBadRequest{}
}

// WithPayload adds the payload to the load test data bad request response
func (o *LoadTestDataBadRequest) WithPayload(payload *models.Error) *LoadTestDataBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the load test data bad request response
func (o *LoadTestDataBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *LoadTestDataBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// LoadTestDataForbiddenCode is the HTTP code returned for type LoadTestDataForbidden
const LoadTestDataForbiddenCode int = 403

/*
LoadTestDataForbidden Forbidden

swagger:response loadTestDataForbidden
*/
type LoadTestDataForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewLoadTestDataForbidden creates LoadTestDataForbidden with default headers values
func NewLoadTestDataForbidden() *LoadTestDataForbidden {

	return &LoadTestDataForbidden{}
}

// WithPayload adds the payload to the load test data forbidden response
func (o *LoadTestDataForbidden) WithPayload(payload *models.Error) *LoadTestDataForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the load test data forbidden response
func (o *LoadTestDataForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *LoadTestDataForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// LoadTestDataUnprocessableEntityCode is the HTTP code returned for type LoadTestDataUnprocessableEntity
const LoadTestDataUnprocessableEntityCode int = 422

/*
LoadTestDataUnprocessableEntity Unprocessable Entity

swagger:response loadTestDataUnprocessableEntity
*/
type LoadTestDataUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewLoadTestDataUnprocessableEntity creates LoadTestDataUnprocessableEntity with default headers values
func NewLoadTestDataUnprocessableEntity() *LoadTestDataUnprocessableEntity {

	return &LoadTestDataUnprocessableEntity{}
}

// WithPayload adds the payload to the load test data unprocessable entity response
func (o *LoadTestDataUnprocessableEntity) WithPayload(payload *models.Error) *LoadTestDataUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the load test data unprocessable entity response
func (o *LoadTestDataUnprocessableEntity) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *LoadTestDataUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// LoadTestDataInternalServerErrorCode is the HTTP code returned for type LoadTestDataInternalServerError
const LoadTestDataInternalServerErrorCode int = 500

/*
LoadTestDataInternalServerError Internal server error

swagger:response loadTestDataInternalServerError
*/
type LoadTestDataInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewLoadTestDataInternalServerError creates LoadTestDataInternalServerError with default headers values
func NewLoadTestDataInternalServerError() *LoadTestDataInternalServerError {

	return &LoadTestDataInternalServerError{}
}

// WithPayload adds the payload to the load test data internal server error response
func (o *LoadTestDataInternalServerError) WithPayload(payload *models.Error) *LoadTestDataInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the load test data internal server error response
func (o *LoadTestDataInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *LoadTestDataInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
