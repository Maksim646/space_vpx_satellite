// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/Maksim646/space_vpx_satellite/internal/api/definition"
)

// UpdateProjectOKCode is the HTTP code returned for type UpdateProjectOK
const UpdateProjectOKCode int = 200

/*
UpdateProjectOK Update Project Response

swagger:response updateProjectOK
*/
type UpdateProjectOK struct {

	/*
	  In: Body
	*/
	Payload *models.Project `json:"body,omitempty"`
}

// NewUpdateProjectOK creates UpdateProjectOK with default headers values
func NewUpdateProjectOK() *UpdateProjectOK {

	return &UpdateProjectOK{}
}

// WithPayload adds the payload to the update project o k response
func (o *UpdateProjectOK) WithPayload(payload *models.Project) *UpdateProjectOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update project o k response
func (o *UpdateProjectOK) SetPayload(payload *models.Project) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateProjectOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateProjectBadRequestCode is the HTTP code returned for type UpdateProjectBadRequest
const UpdateProjectBadRequestCode int = 400

/*
UpdateProjectBadRequest Bad request

swagger:response updateProjectBadRequest
*/
type UpdateProjectBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateProjectBadRequest creates UpdateProjectBadRequest with default headers values
func NewUpdateProjectBadRequest() *UpdateProjectBadRequest {

	return &UpdateProjectBadRequest{}
}

// WithPayload adds the payload to the update project bad request response
func (o *UpdateProjectBadRequest) WithPayload(payload *models.Error) *UpdateProjectBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update project bad request response
func (o *UpdateProjectBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateProjectBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateProjectForbiddenCode is the HTTP code returned for type UpdateProjectForbidden
const UpdateProjectForbiddenCode int = 403

/*
UpdateProjectForbidden Forbidden

swagger:response updateProjectForbidden
*/
type UpdateProjectForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateProjectForbidden creates UpdateProjectForbidden with default headers values
func NewUpdateProjectForbidden() *UpdateProjectForbidden {

	return &UpdateProjectForbidden{}
}

// WithPayload adds the payload to the update project forbidden response
func (o *UpdateProjectForbidden) WithPayload(payload *models.Error) *UpdateProjectForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update project forbidden response
func (o *UpdateProjectForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateProjectForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateProjectUnprocessableEntityCode is the HTTP code returned for type UpdateProjectUnprocessableEntity
const UpdateProjectUnprocessableEntityCode int = 422

/*
UpdateProjectUnprocessableEntity Unprocessable Entity

swagger:response updateProjectUnprocessableEntity
*/
type UpdateProjectUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateProjectUnprocessableEntity creates UpdateProjectUnprocessableEntity with default headers values
func NewUpdateProjectUnprocessableEntity() *UpdateProjectUnprocessableEntity {

	return &UpdateProjectUnprocessableEntity{}
}

// WithPayload adds the payload to the update project unprocessable entity response
func (o *UpdateProjectUnprocessableEntity) WithPayload(payload *models.Error) *UpdateProjectUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update project unprocessable entity response
func (o *UpdateProjectUnprocessableEntity) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateProjectUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateProjectInternalServerErrorCode is the HTTP code returned for type UpdateProjectInternalServerError
const UpdateProjectInternalServerErrorCode int = 500

/*
UpdateProjectInternalServerError Internal server error

swagger:response updateProjectInternalServerError
*/
type UpdateProjectInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateProjectInternalServerError creates UpdateProjectInternalServerError with default headers values
func NewUpdateProjectInternalServerError() *UpdateProjectInternalServerError {

	return &UpdateProjectInternalServerError{}
}

// WithPayload adds the payload to the update project internal server error response
func (o *UpdateProjectInternalServerError) WithPayload(payload *models.Error) *UpdateProjectInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update project internal server error response
func (o *UpdateProjectInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateProjectInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
