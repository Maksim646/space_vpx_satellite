// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"

	"github.com/go-openapi/swag"
)

// GetAvailableBoardComputingModulesURL generates an URL for the get available board computing modules operation
type GetAvailableBoardComputingModulesURL struct {
	FilterBoardComputingModuleByLengthMax *float64
	FilterBoardComputingModuleByLengthMin *float64
	FilterBoardComputingModuleByName      *string
	Limit                                 int64
	Offset                                int64
	SortDirection                         *string
	SortField                             *string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetAvailableBoardComputingModulesURL) WithBasePath(bp string) *GetAvailableBoardComputingModulesURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetAvailableBoardComputingModulesURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *GetAvailableBoardComputingModulesURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/board_computing_module/available_board_computing_module"

	_basePath := o._basePath
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var filterBoardComputingModuleByLengthMaxQ string
	if o.FilterBoardComputingModuleByLengthMax != nil {
		filterBoardComputingModuleByLengthMaxQ = swag.FormatFloat64(*o.FilterBoardComputingModuleByLengthMax)
	}
	if filterBoardComputingModuleByLengthMaxQ != "" {
		qs.Set("FilterBoardComputingModuleByLength[max]", filterBoardComputingModuleByLengthMaxQ)
	}

	var filterBoardComputingModuleByLengthMinQ string
	if o.FilterBoardComputingModuleByLengthMin != nil {
		filterBoardComputingModuleByLengthMinQ = swag.FormatFloat64(*o.FilterBoardComputingModuleByLengthMin)
	}
	if filterBoardComputingModuleByLengthMinQ != "" {
		qs.Set("FilterBoardComputingModuleByLength[min]", filterBoardComputingModuleByLengthMinQ)
	}

	var filterBoardComputingModuleByNameQ string
	if o.FilterBoardComputingModuleByName != nil {
		filterBoardComputingModuleByNameQ = *o.FilterBoardComputingModuleByName
	}
	if filterBoardComputingModuleByNameQ != "" {
		qs.Set("FilterBoardComputingModuleByName", filterBoardComputingModuleByNameQ)
	}

	limitQ := swag.FormatInt64(o.Limit)
	if limitQ != "" {
		qs.Set("limit", limitQ)
	}

	offsetQ := swag.FormatInt64(o.Offset)
	if offsetQ != "" {
		qs.Set("offset", offsetQ)
	}

	var sortDirectionQ string
	if o.SortDirection != nil {
		sortDirectionQ = *o.SortDirection
	}
	if sortDirectionQ != "" {
		qs.Set("sort[direction]", sortDirectionQ)
	}

	var sortFieldQ string
	if o.SortField != nil {
		sortFieldQ = *o.SortField
	}
	if sortFieldQ != "" {
		qs.Set("sort[field]", sortFieldQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *GetAvailableBoardComputingModulesURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *GetAvailableBoardComputingModulesURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *GetAvailableBoardComputingModulesURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on GetAvailableBoardComputingModulesURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on GetAvailableBoardComputingModulesURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *GetAvailableBoardComputingModulesURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
