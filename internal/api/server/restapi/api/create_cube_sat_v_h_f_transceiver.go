// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	models "github.com/Maksim646/space_vpx_satellite/internal/api/definition"
)

// CreateCubeSatVHFTransceiverHandlerFunc turns a function with the right signature into a create cube sat v h f transceiver handler
type CreateCubeSatVHFTransceiverHandlerFunc func(CreateCubeSatVHFTransceiverParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateCubeSatVHFTransceiverHandlerFunc) Handle(params CreateCubeSatVHFTransceiverParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// CreateCubeSatVHFTransceiverHandler interface for that can handle valid create cube sat v h f transceiver params
type CreateCubeSatVHFTransceiverHandler interface {
	Handle(CreateCubeSatVHFTransceiverParams, *models.Principal) middleware.Responder
}

// NewCreateCubeSatVHFTransceiver creates a new http.Handler for the create cube sat v h f transceiver operation
func NewCreateCubeSatVHFTransceiver(ctx *middleware.Context, handler CreateCubeSatVHFTransceiverHandler) *CreateCubeSatVHFTransceiver {
	return &CreateCubeSatVHFTransceiver{Context: ctx, Handler: handler}
}

/*
	CreateCubeSatVHFTransceiver swagger:route POST /cube_sat_vhf_transceiver CubeSatVHFTransceiver createCubeSatVHFTransceiver

Create CubeSat VHF Transceiver
*/
type CreateCubeSatVHFTransceiver struct {
	Context *middleware.Context
	Handler CreateCubeSatVHFTransceiverHandler
}

func (o *CreateCubeSatVHFTransceiver) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateCubeSatVHFTransceiverParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
