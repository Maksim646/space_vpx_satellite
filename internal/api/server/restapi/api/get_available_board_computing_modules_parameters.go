// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetAvailableBoardComputingModulesParams creates a new GetAvailableBoardComputingModulesParams object
//
// There are no default values defined in the spec.
func NewGetAvailableBoardComputingModulesParams() GetAvailableBoardComputingModulesParams {

	return GetAvailableBoardComputingModulesParams{}
}

// GetAvailableBoardComputingModulesParams contains all the bound params for the get available board computing modules operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetAvailableBoardComputingModules
type GetAvailableBoardComputingModulesParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Maximum length to filter by
	  In: query
	*/
	FilterBoardComputingModuleByLengthMax *float64
	/*Minimum length to filter by
	  In: query
	*/
	FilterBoardComputingModuleByLengthMin *float64
	/*Filter Board Computing Module By Name
	  In: query
	*/
	FilterBoardComputingModuleByName *string
	/*Limit for pagination
	  Required: true
	  Minimum: 1
	  In: query
	*/
	Limit int64
	/*Offset for pagination
	  Required: true
	  Minimum: 0
	  In: query
	*/
	Offset int64
	/*Sort direction
	  In: query
	*/
	SortDirection *string
	/*Field to sort by
	  In: query
	*/
	SortField *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetAvailableBoardComputingModulesParams() beforehand.
func (o *GetAvailableBoardComputingModulesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qFilterBoardComputingModuleByLengthMax, qhkFilterBoardComputingModuleByLengthMax, _ := qs.GetOK("FilterBoardComputingModuleByLength[max]")
	if err := o.bindFilterBoardComputingModuleByLengthMax(qFilterBoardComputingModuleByLengthMax, qhkFilterBoardComputingModuleByLengthMax, route.Formats); err != nil {
		res = append(res, err)
	}

	qFilterBoardComputingModuleByLengthMin, qhkFilterBoardComputingModuleByLengthMin, _ := qs.GetOK("FilterBoardComputingModuleByLength[min]")
	if err := o.bindFilterBoardComputingModuleByLengthMin(qFilterBoardComputingModuleByLengthMin, qhkFilterBoardComputingModuleByLengthMin, route.Formats); err != nil {
		res = append(res, err)
	}

	qFilterBoardComputingModuleByName, qhkFilterBoardComputingModuleByName, _ := qs.GetOK("FilterBoardComputingModuleByName")
	if err := o.bindFilterBoardComputingModuleByName(qFilterBoardComputingModuleByName, qhkFilterBoardComputingModuleByName, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qOffset, qhkOffset, _ := qs.GetOK("offset")
	if err := o.bindOffset(qOffset, qhkOffset, route.Formats); err != nil {
		res = append(res, err)
	}

	qSortDirection, qhkSortDirection, _ := qs.GetOK("sort[direction]")
	if err := o.bindSortDirection(qSortDirection, qhkSortDirection, route.Formats); err != nil {
		res = append(res, err)
	}

	qSortField, qhkSortField, _ := qs.GetOK("sort[field]")
	if err := o.bindSortField(qSortField, qhkSortField, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindFilterBoardComputingModuleByLengthMax binds and validates parameter FilterBoardComputingModuleByLengthMax from query.
func (o *GetAvailableBoardComputingModulesParams) bindFilterBoardComputingModuleByLengthMax(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("FilterBoardComputingModuleByLength[max]", "query", "float64", raw)
	}
	o.FilterBoardComputingModuleByLengthMax = &value

	return nil
}

// bindFilterBoardComputingModuleByLengthMin binds and validates parameter FilterBoardComputingModuleByLengthMin from query.
func (o *GetAvailableBoardComputingModulesParams) bindFilterBoardComputingModuleByLengthMin(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("FilterBoardComputingModuleByLength[min]", "query", "float64", raw)
	}
	o.FilterBoardComputingModuleByLengthMin = &value

	return nil
}

// bindFilterBoardComputingModuleByName binds and validates parameter FilterBoardComputingModuleByName from query.
func (o *GetAvailableBoardComputingModulesParams) bindFilterBoardComputingModuleByName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.FilterBoardComputingModuleByName = &raw

	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *GetAvailableBoardComputingModulesParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("limit", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("limit", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int64", raw)
	}
	o.Limit = value

	if err := o.validateLimit(formats); err != nil {
		return err
	}

	return nil
}

// validateLimit carries on validations for parameter Limit
func (o *GetAvailableBoardComputingModulesParams) validateLimit(formats strfmt.Registry) error {

	if err := validate.MinimumInt("limit", "query", o.Limit, 1, false); err != nil {
		return err
	}

	return nil
}

// bindOffset binds and validates parameter Offset from query.
func (o *GetAvailableBoardComputingModulesParams) bindOffset(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("offset", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("offset", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("offset", "query", "int64", raw)
	}
	o.Offset = value

	if err := o.validateOffset(formats); err != nil {
		return err
	}

	return nil
}

// validateOffset carries on validations for parameter Offset
func (o *GetAvailableBoardComputingModulesParams) validateOffset(formats strfmt.Registry) error {

	if err := validate.MinimumInt("offset", "query", o.Offset, 0, false); err != nil {
		return err
	}

	return nil
}

// bindSortDirection binds and validates parameter SortDirection from query.
func (o *GetAvailableBoardComputingModulesParams) bindSortDirection(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.SortDirection = &raw

	if err := o.validateSortDirection(formats); err != nil {
		return err
	}

	return nil
}

// validateSortDirection carries on validations for parameter SortDirection
func (o *GetAvailableBoardComputingModulesParams) validateSortDirection(formats strfmt.Registry) error {

	if err := validate.EnumCase("sort[direction]", "query", *o.SortDirection, []interface{}{"asc", "desc"}, true); err != nil {
		return err
	}

	return nil
}

// bindSortField binds and validates parameter SortField from query.
func (o *GetAvailableBoardComputingModulesParams) bindSortField(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.SortField = &raw

	if err := o.validateSortField(formats); err != nil {
		return err
	}

	return nil
}

// validateSortField carries on validations for parameter SortField
func (o *GetAvailableBoardComputingModulesParams) validateSortField(formats strfmt.Registry) error {

	if err := validate.EnumCase("sort[field]", "query", *o.SortField, []interface{}{"created_at", "name", "length", "width", "height", "weight", "supply_voltage", "power_consumption", "max_operating_temperature", "min_operating_temperature"}, true); err != nil {
		return err
	}

	return nil
}
