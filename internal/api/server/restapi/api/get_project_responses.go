// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/Maksim646/space_vpx_satellite/internal/api/definition"
)

// GetProjectOKCode is the HTTP code returned for type GetProjectOK
const GetProjectOKCode int = 200

/*
GetProjectOK Get Project Response

swagger:response getProjectOK
*/
type GetProjectOK struct {

	/*
	  In: Body
	*/
	Payload *models.Project `json:"body,omitempty"`
}

// NewGetProjectOK creates GetProjectOK with default headers values
func NewGetProjectOK() *GetProjectOK {

	return &GetProjectOK{}
}

// WithPayload adds the payload to the get project o k response
func (o *GetProjectOK) WithPayload(payload *models.Project) *GetProjectOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get project o k response
func (o *GetProjectOK) SetPayload(payload *models.Project) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetProjectOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetProjectBadRequestCode is the HTTP code returned for type GetProjectBadRequest
const GetProjectBadRequestCode int = 400

/*
GetProjectBadRequest Bad request

swagger:response getProjectBadRequest
*/
type GetProjectBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetProjectBadRequest creates GetProjectBadRequest with default headers values
func NewGetProjectBadRequest() *GetProjectBadRequest {

	return &GetProjectBadRequest{}
}

// WithPayload adds the payload to the get project bad request response
func (o *GetProjectBadRequest) WithPayload(payload *models.Error) *GetProjectBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get project bad request response
func (o *GetProjectBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetProjectBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetProjectForbiddenCode is the HTTP code returned for type GetProjectForbidden
const GetProjectForbiddenCode int = 403

/*
GetProjectForbidden Forbidden

swagger:response getProjectForbidden
*/
type GetProjectForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetProjectForbidden creates GetProjectForbidden with default headers values
func NewGetProjectForbidden() *GetProjectForbidden {

	return &GetProjectForbidden{}
}

// WithPayload adds the payload to the get project forbidden response
func (o *GetProjectForbidden) WithPayload(payload *models.Error) *GetProjectForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get project forbidden response
func (o *GetProjectForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetProjectForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetProjectUnprocessableEntityCode is the HTTP code returned for type GetProjectUnprocessableEntity
const GetProjectUnprocessableEntityCode int = 422

/*
GetProjectUnprocessableEntity Unprocessable Entity

swagger:response getProjectUnprocessableEntity
*/
type GetProjectUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetProjectUnprocessableEntity creates GetProjectUnprocessableEntity with default headers values
func NewGetProjectUnprocessableEntity() *GetProjectUnprocessableEntity {

	return &GetProjectUnprocessableEntity{}
}

// WithPayload adds the payload to the get project unprocessable entity response
func (o *GetProjectUnprocessableEntity) WithPayload(payload *models.Error) *GetProjectUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get project unprocessable entity response
func (o *GetProjectUnprocessableEntity) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetProjectUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetProjectInternalServerErrorCode is the HTTP code returned for type GetProjectInternalServerError
const GetProjectInternalServerErrorCode int = 500

/*
GetProjectInternalServerError Internal server error

swagger:response getProjectInternalServerError
*/
type GetProjectInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetProjectInternalServerError creates GetProjectInternalServerError with default headers values
func NewGetProjectInternalServerError() *GetProjectInternalServerError {

	return &GetProjectInternalServerError{}
}

// WithPayload adds the payload to the get project internal server error response
func (o *GetProjectInternalServerError) WithPayload(payload *models.Error) *GetProjectInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get project internal server error response
func (o *GetProjectInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetProjectInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
