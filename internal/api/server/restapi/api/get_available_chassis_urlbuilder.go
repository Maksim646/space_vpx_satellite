// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"

	"github.com/go-openapi/swag"
)

// GetAvailableChassisURL generates an URL for the get available chassis operation
type GetAvailableChassisURL struct {
	FilterChassisByMaxHeightFrom                          *float64
	FilterChassisByMaxLengthFrom                          *float64
	FilterChassisByMaxPowerHandlingCapabilityPerBoardFrom *float64
	FilterChassisByMaxTemperaturePerBoardFrom             *float64
	FilterChassisByMaxWeightFrom                          *float64
	FilterChassisByMaxWidthFrom                           *float64
	FilterChassisByMinHeightTo                            *float64
	FilterChassisByMinLengthTo                            *float64
	FilterChassisByMinPowerHandlingCapabilityPerBoardTo   *float64
	FilterChassisByMinTemperaturePerBoardTo               *float64
	FilterChassisByMinWeightTo                            *float64
	FilterChassisByMinWidthTo                             *float64
	Limit                                                 int64
	Offset                                                int64
	SortField                                             *string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetAvailableChassisURL) WithBasePath(bp string) *GetAvailableChassisURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetAvailableChassisURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *GetAvailableChassisURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/chassis/available_chassis"

	_basePath := o._basePath
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var filterChassisByMaxHeightFromQ string
	if o.FilterChassisByMaxHeightFrom != nil {
		filterChassisByMaxHeightFromQ = swag.FormatFloat64(*o.FilterChassisByMaxHeightFrom)
	}
	if filterChassisByMaxHeightFromQ != "" {
		qs.Set("FilterChassisByMaxHeight[from]", filterChassisByMaxHeightFromQ)
	}

	var filterChassisByMaxLengthFromQ string
	if o.FilterChassisByMaxLengthFrom != nil {
		filterChassisByMaxLengthFromQ = swag.FormatFloat64(*o.FilterChassisByMaxLengthFrom)
	}
	if filterChassisByMaxLengthFromQ != "" {
		qs.Set("FilterChassisByMaxLength[from]", filterChassisByMaxLengthFromQ)
	}

	var filterChassisByMaxPowerHandlingCapabilityPerBoardFromQ string
	if o.FilterChassisByMaxPowerHandlingCapabilityPerBoardFrom != nil {
		filterChassisByMaxPowerHandlingCapabilityPerBoardFromQ = swag.FormatFloat64(*o.FilterChassisByMaxPowerHandlingCapabilityPerBoardFrom)
	}
	if filterChassisByMaxPowerHandlingCapabilityPerBoardFromQ != "" {
		qs.Set("FilterChassisByMaxPowerHandlingCapabilityPerBoard[from]", filterChassisByMaxPowerHandlingCapabilityPerBoardFromQ)
	}

	var filterChassisByMaxTemperaturePerBoardFromQ string
	if o.FilterChassisByMaxTemperaturePerBoardFrom != nil {
		filterChassisByMaxTemperaturePerBoardFromQ = swag.FormatFloat64(*o.FilterChassisByMaxTemperaturePerBoardFrom)
	}
	if filterChassisByMaxTemperaturePerBoardFromQ != "" {
		qs.Set("FilterChassisByMaxTemperaturePerBoard[from]", filterChassisByMaxTemperaturePerBoardFromQ)
	}

	var filterChassisByMaxWeightFromQ string
	if o.FilterChassisByMaxWeightFrom != nil {
		filterChassisByMaxWeightFromQ = swag.FormatFloat64(*o.FilterChassisByMaxWeightFrom)
	}
	if filterChassisByMaxWeightFromQ != "" {
		qs.Set("FilterChassisByMaxWeight[from]", filterChassisByMaxWeightFromQ)
	}

	var filterChassisByMaxWidthFromQ string
	if o.FilterChassisByMaxWidthFrom != nil {
		filterChassisByMaxWidthFromQ = swag.FormatFloat64(*o.FilterChassisByMaxWidthFrom)
	}
	if filterChassisByMaxWidthFromQ != "" {
		qs.Set("FilterChassisByMaxWidth[from]", filterChassisByMaxWidthFromQ)
	}

	var filterChassisByMinHeightToQ string
	if o.FilterChassisByMinHeightTo != nil {
		filterChassisByMinHeightToQ = swag.FormatFloat64(*o.FilterChassisByMinHeightTo)
	}
	if filterChassisByMinHeightToQ != "" {
		qs.Set("FilterChassisByMinHeight[to]", filterChassisByMinHeightToQ)
	}

	var filterChassisByMinLengthToQ string
	if o.FilterChassisByMinLengthTo != nil {
		filterChassisByMinLengthToQ = swag.FormatFloat64(*o.FilterChassisByMinLengthTo)
	}
	if filterChassisByMinLengthToQ != "" {
		qs.Set("FilterChassisByMinLength[to]", filterChassisByMinLengthToQ)
	}

	var filterChassisByMinPowerHandlingCapabilityPerBoardToQ string
	if o.FilterChassisByMinPowerHandlingCapabilityPerBoardTo != nil {
		filterChassisByMinPowerHandlingCapabilityPerBoardToQ = swag.FormatFloat64(*o.FilterChassisByMinPowerHandlingCapabilityPerBoardTo)
	}
	if filterChassisByMinPowerHandlingCapabilityPerBoardToQ != "" {
		qs.Set("FilterChassisByMinPowerHandlingCapabilityPerBoard[to]", filterChassisByMinPowerHandlingCapabilityPerBoardToQ)
	}

	var filterChassisByMinTemperaturePerBoardToQ string
	if o.FilterChassisByMinTemperaturePerBoardTo != nil {
		filterChassisByMinTemperaturePerBoardToQ = swag.FormatFloat64(*o.FilterChassisByMinTemperaturePerBoardTo)
	}
	if filterChassisByMinTemperaturePerBoardToQ != "" {
		qs.Set("FilterChassisByMinTemperaturePerBoard[to]", filterChassisByMinTemperaturePerBoardToQ)
	}

	var filterChassisByMinWeightToQ string
	if o.FilterChassisByMinWeightTo != nil {
		filterChassisByMinWeightToQ = swag.FormatFloat64(*o.FilterChassisByMinWeightTo)
	}
	if filterChassisByMinWeightToQ != "" {
		qs.Set("FilterChassisByMinWeight[to]", filterChassisByMinWeightToQ)
	}

	var filterChassisByMinWidthToQ string
	if o.FilterChassisByMinWidthTo != nil {
		filterChassisByMinWidthToQ = swag.FormatFloat64(*o.FilterChassisByMinWidthTo)
	}
	if filterChassisByMinWidthToQ != "" {
		qs.Set("FilterChassisByMinWidth[to]", filterChassisByMinWidthToQ)
	}

	limitQ := swag.FormatInt64(o.Limit)
	if limitQ != "" {
		qs.Set("limit", limitQ)
	}

	offsetQ := swag.FormatInt64(o.Offset)
	if offsetQ != "" {
		qs.Set("offset", offsetQ)
	}

	var sortFieldQ string
	if o.SortField != nil {
		sortFieldQ = *o.SortField
	}
	if sortFieldQ != "" {
		qs.Set("sort[field]", sortFieldQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *GetAvailableChassisURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *GetAvailableChassisURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *GetAvailableChassisURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on GetAvailableChassisURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on GetAvailableChassisURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *GetAvailableChassisURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
