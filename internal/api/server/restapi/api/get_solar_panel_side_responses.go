// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/Maksim646/space_vpx_satellite/internal/api/definition"
)

// GetSolarPanelSideOKCode is the HTTP code returned for type GetSolarPanelSideOK
const GetSolarPanelSideOKCode int = 200

/*
GetSolarPanelSideOK Get Solar Panel Side Response

swagger:response getSolarPanelSideOK
*/
type GetSolarPanelSideOK struct {

	/*
	  In: Body
	*/
	Payload *models.SolarPanelSide `json:"body,omitempty"`
}

// NewGetSolarPanelSideOK creates GetSolarPanelSideOK with default headers values
func NewGetSolarPanelSideOK() *GetSolarPanelSideOK {

	return &GetSolarPanelSideOK{}
}

// WithPayload adds the payload to the get solar panel side o k response
func (o *GetSolarPanelSideOK) WithPayload(payload *models.SolarPanelSide) *GetSolarPanelSideOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get solar panel side o k response
func (o *GetSolarPanelSideOK) SetPayload(payload *models.SolarPanelSide) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSolarPanelSideOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetSolarPanelSideBadRequestCode is the HTTP code returned for type GetSolarPanelSideBadRequest
const GetSolarPanelSideBadRequestCode int = 400

/*
GetSolarPanelSideBadRequest Bad request

swagger:response getSolarPanelSideBadRequest
*/
type GetSolarPanelSideBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetSolarPanelSideBadRequest creates GetSolarPanelSideBadRequest with default headers values
func NewGetSolarPanelSideBadRequest() *GetSolarPanelSideBadRequest {

	return &GetSolarPanelSideBadRequest{}
}

// WithPayload adds the payload to the get solar panel side bad request response
func (o *GetSolarPanelSideBadRequest) WithPayload(payload *models.Error) *GetSolarPanelSideBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get solar panel side bad request response
func (o *GetSolarPanelSideBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSolarPanelSideBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetSolarPanelSideForbiddenCode is the HTTP code returned for type GetSolarPanelSideForbidden
const GetSolarPanelSideForbiddenCode int = 403

/*
GetSolarPanelSideForbidden Forbidden

swagger:response getSolarPanelSideForbidden
*/
type GetSolarPanelSideForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetSolarPanelSideForbidden creates GetSolarPanelSideForbidden with default headers values
func NewGetSolarPanelSideForbidden() *GetSolarPanelSideForbidden {

	return &GetSolarPanelSideForbidden{}
}

// WithPayload adds the payload to the get solar panel side forbidden response
func (o *GetSolarPanelSideForbidden) WithPayload(payload *models.Error) *GetSolarPanelSideForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get solar panel side forbidden response
func (o *GetSolarPanelSideForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSolarPanelSideForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetSolarPanelSideUnprocessableEntityCode is the HTTP code returned for type GetSolarPanelSideUnprocessableEntity
const GetSolarPanelSideUnprocessableEntityCode int = 422

/*
GetSolarPanelSideUnprocessableEntity Unprocessable Entity

swagger:response getSolarPanelSideUnprocessableEntity
*/
type GetSolarPanelSideUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetSolarPanelSideUnprocessableEntity creates GetSolarPanelSideUnprocessableEntity with default headers values
func NewGetSolarPanelSideUnprocessableEntity() *GetSolarPanelSideUnprocessableEntity {

	return &GetSolarPanelSideUnprocessableEntity{}
}

// WithPayload adds the payload to the get solar panel side unprocessable entity response
func (o *GetSolarPanelSideUnprocessableEntity) WithPayload(payload *models.Error) *GetSolarPanelSideUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get solar panel side unprocessable entity response
func (o *GetSolarPanelSideUnprocessableEntity) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSolarPanelSideUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetSolarPanelSideInternalServerErrorCode is the HTTP code returned for type GetSolarPanelSideInternalServerError
const GetSolarPanelSideInternalServerErrorCode int = 500

/*
GetSolarPanelSideInternalServerError Internal server error

swagger:response getSolarPanelSideInternalServerError
*/
type GetSolarPanelSideInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetSolarPanelSideInternalServerError creates GetSolarPanelSideInternalServerError with default headers values
func NewGetSolarPanelSideInternalServerError() *GetSolarPanelSideInternalServerError {

	return &GetSolarPanelSideInternalServerError{}
}

// WithPayload adds the payload to the get solar panel side internal server error response
func (o *GetSolarPanelSideInternalServerError) WithPayload(payload *models.Error) *GetSolarPanelSideInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get solar panel side internal server error response
func (o *GetSolarPanelSideInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSolarPanelSideInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
