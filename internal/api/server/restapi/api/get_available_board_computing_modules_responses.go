// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/Maksim646/space_vpx_satellite/internal/api/definition"
)

// GetAvailableBoardComputingModulesOKCode is the HTTP code returned for type GetAvailableBoardComputingModulesOK
const GetAvailableBoardComputingModulesOKCode int = 200

/*
GetAvailableBoardComputingModulesOK Successfully retrieved list of Board Computing Modules

swagger:response getAvailableBoardComputingModulesOK
*/
type GetAvailableBoardComputingModulesOK struct {

	/*
	  In: Body
	*/
	Payload *models.BoardComputingModuleList `json:"body,omitempty"`
}

// NewGetAvailableBoardComputingModulesOK creates GetAvailableBoardComputingModulesOK with default headers values
func NewGetAvailableBoardComputingModulesOK() *GetAvailableBoardComputingModulesOK {

	return &GetAvailableBoardComputingModulesOK{}
}

// WithPayload adds the payload to the get available board computing modules o k response
func (o *GetAvailableBoardComputingModulesOK) WithPayload(payload *models.BoardComputingModuleList) *GetAvailableBoardComputingModulesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get available board computing modules o k response
func (o *GetAvailableBoardComputingModulesOK) SetPayload(payload *models.BoardComputingModuleList) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAvailableBoardComputingModulesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAvailableBoardComputingModulesBadRequestCode is the HTTP code returned for type GetAvailableBoardComputingModulesBadRequest
const GetAvailableBoardComputingModulesBadRequestCode int = 400

/*
GetAvailableBoardComputingModulesBadRequest Bad request (e.g., invalid input)

swagger:response getAvailableBoardComputingModulesBadRequest
*/
type GetAvailableBoardComputingModulesBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetAvailableBoardComputingModulesBadRequest creates GetAvailableBoardComputingModulesBadRequest with default headers values
func NewGetAvailableBoardComputingModulesBadRequest() *GetAvailableBoardComputingModulesBadRequest {

	return &GetAvailableBoardComputingModulesBadRequest{}
}

// WithPayload adds the payload to the get available board computing modules bad request response
func (o *GetAvailableBoardComputingModulesBadRequest) WithPayload(payload *models.Error) *GetAvailableBoardComputingModulesBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get available board computing modules bad request response
func (o *GetAvailableBoardComputingModulesBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAvailableBoardComputingModulesBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAvailableBoardComputingModulesUnauthorizedCode is the HTTP code returned for type GetAvailableBoardComputingModulesUnauthorized
const GetAvailableBoardComputingModulesUnauthorizedCode int = 401

/*
GetAvailableBoardComputingModulesUnauthorized Unauthorized

swagger:response getAvailableBoardComputingModulesUnauthorized
*/
type GetAvailableBoardComputingModulesUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetAvailableBoardComputingModulesUnauthorized creates GetAvailableBoardComputingModulesUnauthorized with default headers values
func NewGetAvailableBoardComputingModulesUnauthorized() *GetAvailableBoardComputingModulesUnauthorized {

	return &GetAvailableBoardComputingModulesUnauthorized{}
}

// WithPayload adds the payload to the get available board computing modules unauthorized response
func (o *GetAvailableBoardComputingModulesUnauthorized) WithPayload(payload *models.Error) *GetAvailableBoardComputingModulesUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get available board computing modules unauthorized response
func (o *GetAvailableBoardComputingModulesUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAvailableBoardComputingModulesUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAvailableBoardComputingModulesForbiddenCode is the HTTP code returned for type GetAvailableBoardComputingModulesForbidden
const GetAvailableBoardComputingModulesForbiddenCode int = 403

/*
GetAvailableBoardComputingModulesForbidden Forbidden

swagger:response getAvailableBoardComputingModulesForbidden
*/
type GetAvailableBoardComputingModulesForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetAvailableBoardComputingModulesForbidden creates GetAvailableBoardComputingModulesForbidden with default headers values
func NewGetAvailableBoardComputingModulesForbidden() *GetAvailableBoardComputingModulesForbidden {

	return &GetAvailableBoardComputingModulesForbidden{}
}

// WithPayload adds the payload to the get available board computing modules forbidden response
func (o *GetAvailableBoardComputingModulesForbidden) WithPayload(payload *models.Error) *GetAvailableBoardComputingModulesForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get available board computing modules forbidden response
func (o *GetAvailableBoardComputingModulesForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAvailableBoardComputingModulesForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAvailableBoardComputingModulesInternalServerErrorCode is the HTTP code returned for type GetAvailableBoardComputingModulesInternalServerError
const GetAvailableBoardComputingModulesInternalServerErrorCode int = 500

/*
GetAvailableBoardComputingModulesInternalServerError Internal server error

swagger:response getAvailableBoardComputingModulesInternalServerError
*/
type GetAvailableBoardComputingModulesInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetAvailableBoardComputingModulesInternalServerError creates GetAvailableBoardComputingModulesInternalServerError with default headers values
func NewGetAvailableBoardComputingModulesInternalServerError() *GetAvailableBoardComputingModulesInternalServerError {

	return &GetAvailableBoardComputingModulesInternalServerError{}
}

// WithPayload adds the payload to the get available board computing modules internal server error response
func (o *GetAvailableBoardComputingModulesInternalServerError) WithPayload(payload *models.Error) *GetAvailableBoardComputingModulesInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get available board computing modules internal server error response
func (o *GetAvailableBoardComputingModulesInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAvailableBoardComputingModulesInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
