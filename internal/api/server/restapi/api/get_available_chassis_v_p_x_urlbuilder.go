// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"

	"github.com/go-openapi/swag"
)

// GetAvailableChassisVPXURL generates an URL for the get available chassis v p x operation
type GetAvailableChassisVPXURL struct {
	FilterChassisVPXByMaxHeightFrom                          *float64
	FilterChassisVPXByMaxLengthFrom                          *float64
	FilterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom *float64
	FilterChassisVPXByMaxTemperaturePerBoardFrom             *float64
	FilterChassisVPXByMaxWeightFrom                          *float64
	FilterChassisVPXByMaxWidthFrom                           *float64
	FilterChassisVPXByMinHeightTo                            *float64
	FilterChassisVPXByMinLengthTo                            *float64
	FilterChassisVPXByMinPowerHandlingCapabilityPerBoardTo   *float64
	FilterChassisVPXByMinTemperaturePerBoardTo               *float64
	FilterChassisVPXByMinWeightTo                            *float64
	FilterChassisVPXByMinWidthTo                             *float64
	Limit                                                    int64
	Offset                                                   int64
	SortField                                                *string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetAvailableChassisVPXURL) WithBasePath(bp string) *GetAvailableChassisVPXURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetAvailableChassisVPXURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *GetAvailableChassisVPXURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/chassis_vpx/available_chassis"

	_basePath := o._basePath
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var filterChassisVPXByMaxHeightFromQ string
	if o.FilterChassisVPXByMaxHeightFrom != nil {
		filterChassisVPXByMaxHeightFromQ = swag.FormatFloat64(*o.FilterChassisVPXByMaxHeightFrom)
	}
	if filterChassisVPXByMaxHeightFromQ != "" {
		qs.Set("FilterChassisVPXByMaxHeight[from]", filterChassisVPXByMaxHeightFromQ)
	}

	var filterChassisVPXByMaxLengthFromQ string
	if o.FilterChassisVPXByMaxLengthFrom != nil {
		filterChassisVPXByMaxLengthFromQ = swag.FormatFloat64(*o.FilterChassisVPXByMaxLengthFrom)
	}
	if filterChassisVPXByMaxLengthFromQ != "" {
		qs.Set("FilterChassisVPXByMaxLength[from]", filterChassisVPXByMaxLengthFromQ)
	}

	var filterChassisVPXByMaxPowerHandlingCapabilityPerBoardFromQ string
	if o.FilterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom != nil {
		filterChassisVPXByMaxPowerHandlingCapabilityPerBoardFromQ = swag.FormatFloat64(*o.FilterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom)
	}
	if filterChassisVPXByMaxPowerHandlingCapabilityPerBoardFromQ != "" {
		qs.Set("FilterChassisVPXByMaxPowerHandlingCapabilityPerBoard[from]", filterChassisVPXByMaxPowerHandlingCapabilityPerBoardFromQ)
	}

	var filterChassisVPXByMaxTemperaturePerBoardFromQ string
	if o.FilterChassisVPXByMaxTemperaturePerBoardFrom != nil {
		filterChassisVPXByMaxTemperaturePerBoardFromQ = swag.FormatFloat64(*o.FilterChassisVPXByMaxTemperaturePerBoardFrom)
	}
	if filterChassisVPXByMaxTemperaturePerBoardFromQ != "" {
		qs.Set("FilterChassisVPXByMaxTemperaturePerBoard[from]", filterChassisVPXByMaxTemperaturePerBoardFromQ)
	}

	var filterChassisVPXByMaxWeightFromQ string
	if o.FilterChassisVPXByMaxWeightFrom != nil {
		filterChassisVPXByMaxWeightFromQ = swag.FormatFloat64(*o.FilterChassisVPXByMaxWeightFrom)
	}
	if filterChassisVPXByMaxWeightFromQ != "" {
		qs.Set("FilterChassisVPXByMaxWeight[from]", filterChassisVPXByMaxWeightFromQ)
	}

	var filterChassisVPXByMaxWidthFromQ string
	if o.FilterChassisVPXByMaxWidthFrom != nil {
		filterChassisVPXByMaxWidthFromQ = swag.FormatFloat64(*o.FilterChassisVPXByMaxWidthFrom)
	}
	if filterChassisVPXByMaxWidthFromQ != "" {
		qs.Set("FilterChassisVPXByMaxWidth[from]", filterChassisVPXByMaxWidthFromQ)
	}

	var filterChassisVPXByMinHeightToQ string
	if o.FilterChassisVPXByMinHeightTo != nil {
		filterChassisVPXByMinHeightToQ = swag.FormatFloat64(*o.FilterChassisVPXByMinHeightTo)
	}
	if filterChassisVPXByMinHeightToQ != "" {
		qs.Set("FilterChassisVPXByMinHeight[to]", filterChassisVPXByMinHeightToQ)
	}

	var filterChassisVPXByMinLengthToQ string
	if o.FilterChassisVPXByMinLengthTo != nil {
		filterChassisVPXByMinLengthToQ = swag.FormatFloat64(*o.FilterChassisVPXByMinLengthTo)
	}
	if filterChassisVPXByMinLengthToQ != "" {
		qs.Set("FilterChassisVPXByMinLength[to]", filterChassisVPXByMinLengthToQ)
	}

	var filterChassisVPXByMinPowerHandlingCapabilityPerBoardToQ string
	if o.FilterChassisVPXByMinPowerHandlingCapabilityPerBoardTo != nil {
		filterChassisVPXByMinPowerHandlingCapabilityPerBoardToQ = swag.FormatFloat64(*o.FilterChassisVPXByMinPowerHandlingCapabilityPerBoardTo)
	}
	if filterChassisVPXByMinPowerHandlingCapabilityPerBoardToQ != "" {
		qs.Set("FilterChassisVPXByMinPowerHandlingCapabilityPerBoard[to]", filterChassisVPXByMinPowerHandlingCapabilityPerBoardToQ)
	}

	var filterChassisVPXByMinTemperaturePerBoardToQ string
	if o.FilterChassisVPXByMinTemperaturePerBoardTo != nil {
		filterChassisVPXByMinTemperaturePerBoardToQ = swag.FormatFloat64(*o.FilterChassisVPXByMinTemperaturePerBoardTo)
	}
	if filterChassisVPXByMinTemperaturePerBoardToQ != "" {
		qs.Set("FilterChassisVPXByMinTemperaturePerBoard[to]", filterChassisVPXByMinTemperaturePerBoardToQ)
	}

	var filterChassisVPXByMinWeightToQ string
	if o.FilterChassisVPXByMinWeightTo != nil {
		filterChassisVPXByMinWeightToQ = swag.FormatFloat64(*o.FilterChassisVPXByMinWeightTo)
	}
	if filterChassisVPXByMinWeightToQ != "" {
		qs.Set("FilterChassisVPXByMinWeight[to]", filterChassisVPXByMinWeightToQ)
	}

	var filterChassisVPXByMinWidthToQ string
	if o.FilterChassisVPXByMinWidthTo != nil {
		filterChassisVPXByMinWidthToQ = swag.FormatFloat64(*o.FilterChassisVPXByMinWidthTo)
	}
	if filterChassisVPXByMinWidthToQ != "" {
		qs.Set("FilterChassisVPXByMinWidth[to]", filterChassisVPXByMinWidthToQ)
	}

	limitQ := swag.FormatInt64(o.Limit)
	if limitQ != "" {
		qs.Set("limit", limitQ)
	}

	offsetQ := swag.FormatInt64(o.Offset)
	if offsetQ != "" {
		qs.Set("offset", offsetQ)
	}

	var sortFieldQ string
	if o.SortField != nil {
		sortFieldQ = *o.SortField
	}
	if sortFieldQ != "" {
		qs.Set("sort[field]", sortFieldQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *GetAvailableChassisVPXURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *GetAvailableChassisVPXURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *GetAvailableChassisVPXURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on GetAvailableChassisVPXURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on GetAvailableChassisVPXURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *GetAvailableChassisVPXURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
