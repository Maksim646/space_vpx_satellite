// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetAvailableChassisVPXParams creates a new GetAvailableChassisVPXParams object
//
// There are no default values defined in the spec.
func NewGetAvailableChassisVPXParams() GetAvailableChassisVPXParams {

	return GetAvailableChassisVPXParams{}
}

// GetAvailableChassisVPXParams contains all the bound params for the get available chassis v p x operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetAvailableChassisVPX
type GetAvailableChassisVPXParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Filter By Max Height
	  In: query
	*/
	FilterChassisVPXByMaxHeightFrom *float64
	/*Filter By Max Lenghth
	  In: query
	*/
	FilterChassisVPXByMaxLengthFrom *float64
	/*Filter By Max Power Handling Capability Per Board
	  In: query
	*/
	FilterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom *float64
	/*Filter By Max Temperature Per Board
	  In: query
	*/
	FilterChassisVPXByMaxTemperaturePerBoardFrom *float64
	/*Filter By Max Weight
	  In: query
	*/
	FilterChassisVPXByMaxWeightFrom *float64
	/*Filter By Max Width
	  In: query
	*/
	FilterChassisVPXByMaxWidthFrom *float64
	/*Filter By Min Height
	  In: query
	*/
	FilterChassisVPXByMinHeightTo *float64
	/*Filter By Min Length
	  In: query
	*/
	FilterChassisVPXByMinLengthTo *float64
	/*Filter By Min Power Handling Capability Per Board
	  In: query
	*/
	FilterChassisVPXByMinPowerHandlingCapabilityPerBoardTo *float64
	/*Filter By Min Temperature Per Board
	  In: query
	*/
	FilterChassisVPXByMinTemperaturePerBoardTo *float64
	/*Filter By Min Weight
	  In: query
	*/
	FilterChassisVPXByMinWeightTo *float64
	/*Filter By Min Width
	  In: query
	*/
	FilterChassisVPXByMinWidthTo *float64
	/*Offset Configs
	  Required: true
	  Minimum: 0
	  In: query
	*/
	Limit int64
	/*Offset Configs
	  Required: true
	  Minimum: 0
	  In: query
	*/
	Offset int64
	/*sort parametrs
	  In: query
	*/
	SortField *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetAvailableChassisVPXParams() beforehand.
func (o *GetAvailableChassisVPXParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qFilterChassisVPXByMaxHeightFrom, qhkFilterChassisVPXByMaxHeightFrom, _ := qs.GetOK("FilterChassisVPXByMaxHeight[from]")
	if err := o.bindFilterChassisVPXByMaxHeightFrom(qFilterChassisVPXByMaxHeightFrom, qhkFilterChassisVPXByMaxHeightFrom, route.Formats); err != nil {
		res = append(res, err)
	}

	qFilterChassisVPXByMaxLengthFrom, qhkFilterChassisVPXByMaxLengthFrom, _ := qs.GetOK("FilterChassisVPXByMaxLength[from]")
	if err := o.bindFilterChassisVPXByMaxLengthFrom(qFilterChassisVPXByMaxLengthFrom, qhkFilterChassisVPXByMaxLengthFrom, route.Formats); err != nil {
		res = append(res, err)
	}

	qFilterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom, qhkFilterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom, _ := qs.GetOK("FilterChassisVPXByMaxPowerHandlingCapabilityPerBoard[from]")
	if err := o.bindFilterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom(qFilterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom, qhkFilterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom, route.Formats); err != nil {
		res = append(res, err)
	}

	qFilterChassisVPXByMaxTemperaturePerBoardFrom, qhkFilterChassisVPXByMaxTemperaturePerBoardFrom, _ := qs.GetOK("FilterChassisVPXByMaxTemperaturePerBoard[from]")
	if err := o.bindFilterChassisVPXByMaxTemperaturePerBoardFrom(qFilterChassisVPXByMaxTemperaturePerBoardFrom, qhkFilterChassisVPXByMaxTemperaturePerBoardFrom, route.Formats); err != nil {
		res = append(res, err)
	}

	qFilterChassisVPXByMaxWeightFrom, qhkFilterChassisVPXByMaxWeightFrom, _ := qs.GetOK("FilterChassisVPXByMaxWeight[from]")
	if err := o.bindFilterChassisVPXByMaxWeightFrom(qFilterChassisVPXByMaxWeightFrom, qhkFilterChassisVPXByMaxWeightFrom, route.Formats); err != nil {
		res = append(res, err)
	}

	qFilterChassisVPXByMaxWidthFrom, qhkFilterChassisVPXByMaxWidthFrom, _ := qs.GetOK("FilterChassisVPXByMaxWidth[from]")
	if err := o.bindFilterChassisVPXByMaxWidthFrom(qFilterChassisVPXByMaxWidthFrom, qhkFilterChassisVPXByMaxWidthFrom, route.Formats); err != nil {
		res = append(res, err)
	}

	qFilterChassisVPXByMinHeightTo, qhkFilterChassisVPXByMinHeightTo, _ := qs.GetOK("FilterChassisVPXByMinHeight[to]")
	if err := o.bindFilterChassisVPXByMinHeightTo(qFilterChassisVPXByMinHeightTo, qhkFilterChassisVPXByMinHeightTo, route.Formats); err != nil {
		res = append(res, err)
	}

	qFilterChassisVPXByMinLengthTo, qhkFilterChassisVPXByMinLengthTo, _ := qs.GetOK("FilterChassisVPXByMinLength[to]")
	if err := o.bindFilterChassisVPXByMinLengthTo(qFilterChassisVPXByMinLengthTo, qhkFilterChassisVPXByMinLengthTo, route.Formats); err != nil {
		res = append(res, err)
	}

	qFilterChassisVPXByMinPowerHandlingCapabilityPerBoardTo, qhkFilterChassisVPXByMinPowerHandlingCapabilityPerBoardTo, _ := qs.GetOK("FilterChassisVPXByMinPowerHandlingCapabilityPerBoard[to]")
	if err := o.bindFilterChassisVPXByMinPowerHandlingCapabilityPerBoardTo(qFilterChassisVPXByMinPowerHandlingCapabilityPerBoardTo, qhkFilterChassisVPXByMinPowerHandlingCapabilityPerBoardTo, route.Formats); err != nil {
		res = append(res, err)
	}

	qFilterChassisVPXByMinTemperaturePerBoardTo, qhkFilterChassisVPXByMinTemperaturePerBoardTo, _ := qs.GetOK("FilterChassisVPXByMinTemperaturePerBoard[to]")
	if err := o.bindFilterChassisVPXByMinTemperaturePerBoardTo(qFilterChassisVPXByMinTemperaturePerBoardTo, qhkFilterChassisVPXByMinTemperaturePerBoardTo, route.Formats); err != nil {
		res = append(res, err)
	}

	qFilterChassisVPXByMinWeightTo, qhkFilterChassisVPXByMinWeightTo, _ := qs.GetOK("FilterChassisVPXByMinWeight[to]")
	if err := o.bindFilterChassisVPXByMinWeightTo(qFilterChassisVPXByMinWeightTo, qhkFilterChassisVPXByMinWeightTo, route.Formats); err != nil {
		res = append(res, err)
	}

	qFilterChassisVPXByMinWidthTo, qhkFilterChassisVPXByMinWidthTo, _ := qs.GetOK("FilterChassisVPXByMinWidth[to]")
	if err := o.bindFilterChassisVPXByMinWidthTo(qFilterChassisVPXByMinWidthTo, qhkFilterChassisVPXByMinWidthTo, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qOffset, qhkOffset, _ := qs.GetOK("offset")
	if err := o.bindOffset(qOffset, qhkOffset, route.Formats); err != nil {
		res = append(res, err)
	}

	qSortField, qhkSortField, _ := qs.GetOK("sort[field]")
	if err := o.bindSortField(qSortField, qhkSortField, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindFilterChassisVPXByMaxHeightFrom binds and validates parameter FilterChassisVPXByMaxHeightFrom from query.
func (o *GetAvailableChassisVPXParams) bindFilterChassisVPXByMaxHeightFrom(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("FilterChassisVPXByMaxHeight[from]", "query", "float64", raw)
	}
	o.FilterChassisVPXByMaxHeightFrom = &value

	return nil
}

// bindFilterChassisVPXByMaxLengthFrom binds and validates parameter FilterChassisVPXByMaxLengthFrom from query.
func (o *GetAvailableChassisVPXParams) bindFilterChassisVPXByMaxLengthFrom(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("FilterChassisVPXByMaxLength[from]", "query", "float64", raw)
	}
	o.FilterChassisVPXByMaxLengthFrom = &value

	return nil
}

// bindFilterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom binds and validates parameter FilterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom from query.
func (o *GetAvailableChassisVPXParams) bindFilterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("FilterChassisVPXByMaxPowerHandlingCapabilityPerBoard[from]", "query", "float64", raw)
	}
	o.FilterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom = &value

	return nil
}

// bindFilterChassisVPXByMaxTemperaturePerBoardFrom binds and validates parameter FilterChassisVPXByMaxTemperaturePerBoardFrom from query.
func (o *GetAvailableChassisVPXParams) bindFilterChassisVPXByMaxTemperaturePerBoardFrom(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("FilterChassisVPXByMaxTemperaturePerBoard[from]", "query", "float64", raw)
	}
	o.FilterChassisVPXByMaxTemperaturePerBoardFrom = &value

	return nil
}

// bindFilterChassisVPXByMaxWeightFrom binds and validates parameter FilterChassisVPXByMaxWeightFrom from query.
func (o *GetAvailableChassisVPXParams) bindFilterChassisVPXByMaxWeightFrom(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("FilterChassisVPXByMaxWeight[from]", "query", "float64", raw)
	}
	o.FilterChassisVPXByMaxWeightFrom = &value

	return nil
}

// bindFilterChassisVPXByMaxWidthFrom binds and validates parameter FilterChassisVPXByMaxWidthFrom from query.
func (o *GetAvailableChassisVPXParams) bindFilterChassisVPXByMaxWidthFrom(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("FilterChassisVPXByMaxWidth[from]", "query", "float64", raw)
	}
	o.FilterChassisVPXByMaxWidthFrom = &value

	return nil
}

// bindFilterChassisVPXByMinHeightTo binds and validates parameter FilterChassisVPXByMinHeightTo from query.
func (o *GetAvailableChassisVPXParams) bindFilterChassisVPXByMinHeightTo(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("FilterChassisVPXByMinHeight[to]", "query", "float64", raw)
	}
	o.FilterChassisVPXByMinHeightTo = &value

	return nil
}

// bindFilterChassisVPXByMinLengthTo binds and validates parameter FilterChassisVPXByMinLengthTo from query.
func (o *GetAvailableChassisVPXParams) bindFilterChassisVPXByMinLengthTo(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("FilterChassisVPXByMinLength[to]", "query", "float64", raw)
	}
	o.FilterChassisVPXByMinLengthTo = &value

	return nil
}

// bindFilterChassisVPXByMinPowerHandlingCapabilityPerBoardTo binds and validates parameter FilterChassisVPXByMinPowerHandlingCapabilityPerBoardTo from query.
func (o *GetAvailableChassisVPXParams) bindFilterChassisVPXByMinPowerHandlingCapabilityPerBoardTo(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("FilterChassisVPXByMinPowerHandlingCapabilityPerBoard[to]", "query", "float64", raw)
	}
	o.FilterChassisVPXByMinPowerHandlingCapabilityPerBoardTo = &value

	return nil
}

// bindFilterChassisVPXByMinTemperaturePerBoardTo binds and validates parameter FilterChassisVPXByMinTemperaturePerBoardTo from query.
func (o *GetAvailableChassisVPXParams) bindFilterChassisVPXByMinTemperaturePerBoardTo(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("FilterChassisVPXByMinTemperaturePerBoard[to]", "query", "float64", raw)
	}
	o.FilterChassisVPXByMinTemperaturePerBoardTo = &value

	return nil
}

// bindFilterChassisVPXByMinWeightTo binds and validates parameter FilterChassisVPXByMinWeightTo from query.
func (o *GetAvailableChassisVPXParams) bindFilterChassisVPXByMinWeightTo(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("FilterChassisVPXByMinWeight[to]", "query", "float64", raw)
	}
	o.FilterChassisVPXByMinWeightTo = &value

	return nil
}

// bindFilterChassisVPXByMinWidthTo binds and validates parameter FilterChassisVPXByMinWidthTo from query.
func (o *GetAvailableChassisVPXParams) bindFilterChassisVPXByMinWidthTo(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("FilterChassisVPXByMinWidth[to]", "query", "float64", raw)
	}
	o.FilterChassisVPXByMinWidthTo = &value

	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *GetAvailableChassisVPXParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("limit", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("limit", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int64", raw)
	}
	o.Limit = value

	if err := o.validateLimit(formats); err != nil {
		return err
	}

	return nil
}

// validateLimit carries on validations for parameter Limit
func (o *GetAvailableChassisVPXParams) validateLimit(formats strfmt.Registry) error {

	if err := validate.MinimumInt("limit", "query", o.Limit, 0, false); err != nil {
		return err
	}

	return nil
}

// bindOffset binds and validates parameter Offset from query.
func (o *GetAvailableChassisVPXParams) bindOffset(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("offset", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("offset", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("offset", "query", "int64", raw)
	}
	o.Offset = value

	if err := o.validateOffset(formats); err != nil {
		return err
	}

	return nil
}

// validateOffset carries on validations for parameter Offset
func (o *GetAvailableChassisVPXParams) validateOffset(formats strfmt.Registry) error {

	if err := validate.MinimumInt("offset", "query", o.Offset, 0, false); err != nil {
		return err
	}

	return nil
}

// bindSortField binds and validates parameter SortField from query.
func (o *GetAvailableChassisVPXParams) bindSortField(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.SortField = &raw

	if err := o.validateSortField(formats); err != nil {
		return err
	}

	return nil
}

// validateSortField carries on validations for parameter SortField
func (o *GetAvailableChassisVPXParams) validateSortField(formats strfmt.Registry) error {

	if err := validate.EnumCase("sort[field]", "query", *o.SortField, []interface{}{"created_at", "weight"}, true); err != nil {
		return err
	}

	return nil
}
