// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	models "github.com/Maksim646/space_vpx_satellite/internal/api/definition"
)

// DeleteChassisHandlerFunc turns a function with the right signature into a delete chassis handler
type DeleteChassisHandlerFunc func(DeleteChassisParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteChassisHandlerFunc) Handle(params DeleteChassisParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// DeleteChassisHandler interface for that can handle valid delete chassis params
type DeleteChassisHandler interface {
	Handle(DeleteChassisParams, *models.Principal) middleware.Responder
}

// NewDeleteChassis creates a new http.Handler for the delete chassis operation
func NewDeleteChassis(ctx *middleware.Context, handler DeleteChassisHandler) *DeleteChassis {
	return &DeleteChassis{Context: ctx, Handler: handler}
}

/*
	DeleteChassis swagger:route DELETE /chassis/{id} Chassis deleteChassis

Delete chassis by ID
*/
type DeleteChassis struct {
	Context *middleware.Context
	Handler DeleteChassisHandler
}

func (o *DeleteChassis) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteChassisParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
