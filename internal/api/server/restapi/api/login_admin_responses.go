// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/Maksim646/space_vpx_satellite/internal/api/definition"
)

// LoginAdminOKCode is the HTTP code returned for type LoginAdminOK
const LoginAdminOKCode int = 200

/*
LoginAdminOK Login Admin Response

swagger:response loginAdminOK
*/
type LoginAdminOK struct {

	/*
	  In: Body
	*/
	Payload *models.LoginResponse `json:"body,omitempty"`
}

// NewLoginAdminOK creates LoginAdminOK with default headers values
func NewLoginAdminOK() *LoginAdminOK {

	return &LoginAdminOK{}
}

// WithPayload adds the payload to the login admin o k response
func (o *LoginAdminOK) WithPayload(payload *models.LoginResponse) *LoginAdminOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the login admin o k response
func (o *LoginAdminOK) SetPayload(payload *models.LoginResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *LoginAdminOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// LoginAdminBadRequestCode is the HTTP code returned for type LoginAdminBadRequest
const LoginAdminBadRequestCode int = 400

/*
LoginAdminBadRequest Bad request

swagger:response loginAdminBadRequest
*/
type LoginAdminBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewLoginAdminBadRequest creates LoginAdminBadRequest with default headers values
func NewLoginAdminBadRequest() *LoginAdminBadRequest {

	return &LoginAdminBadRequest{}
}

// WithPayload adds the payload to the login admin bad request response
func (o *LoginAdminBadRequest) WithPayload(payload *models.Error) *LoginAdminBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the login admin bad request response
func (o *LoginAdminBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *LoginAdminBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// LoginAdminForbiddenCode is the HTTP code returned for type LoginAdminForbidden
const LoginAdminForbiddenCode int = 403

/*
LoginAdminForbidden Forbidden

swagger:response loginAdminForbidden
*/
type LoginAdminForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewLoginAdminForbidden creates LoginAdminForbidden with default headers values
func NewLoginAdminForbidden() *LoginAdminForbidden {

	return &LoginAdminForbidden{}
}

// WithPayload adds the payload to the login admin forbidden response
func (o *LoginAdminForbidden) WithPayload(payload *models.Error) *LoginAdminForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the login admin forbidden response
func (o *LoginAdminForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *LoginAdminForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// LoginAdminUnprocessableEntityCode is the HTTP code returned for type LoginAdminUnprocessableEntity
const LoginAdminUnprocessableEntityCode int = 422

/*
LoginAdminUnprocessableEntity Unprocessable Entity

swagger:response loginAdminUnprocessableEntity
*/
type LoginAdminUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewLoginAdminUnprocessableEntity creates LoginAdminUnprocessableEntity with default headers values
func NewLoginAdminUnprocessableEntity() *LoginAdminUnprocessableEntity {

	return &LoginAdminUnprocessableEntity{}
}

// WithPayload adds the payload to the login admin unprocessable entity response
func (o *LoginAdminUnprocessableEntity) WithPayload(payload *models.Error) *LoginAdminUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the login admin unprocessable entity response
func (o *LoginAdminUnprocessableEntity) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *LoginAdminUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// LoginAdminInternalServerErrorCode is the HTTP code returned for type LoginAdminInternalServerError
const LoginAdminInternalServerErrorCode int = 500

/*
LoginAdminInternalServerError Internal server error

swagger:response loginAdminInternalServerError
*/
type LoginAdminInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewLoginAdminInternalServerError creates LoginAdminInternalServerError with default headers values
func NewLoginAdminInternalServerError() *LoginAdminInternalServerError {

	return &LoginAdminInternalServerError{}
}

// WithPayload adds the payload to the login admin internal server error response
func (o *LoginAdminInternalServerError) WithPayload(payload *models.Error) *LoginAdminInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the login admin internal server error response
func (o *LoginAdminInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *LoginAdminInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
