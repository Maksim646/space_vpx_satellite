// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/Maksim646/space_vpx_satellite/internal/api/definition"
)

// LoginUserOKCode is the HTTP code returned for type LoginUserOK
const LoginUserOKCode int = 200

/*
LoginUserOK Login Response

swagger:response loginUserOK
*/
type LoginUserOK struct {

	/*
	  In: Body
	*/
	Payload *models.LoginResponse `json:"body,omitempty"`
}

// NewLoginUserOK creates LoginUserOK with default headers values
func NewLoginUserOK() *LoginUserOK {

	return &LoginUserOK{}
}

// WithPayload adds the payload to the login user o k response
func (o *LoginUserOK) WithPayload(payload *models.LoginResponse) *LoginUserOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the login user o k response
func (o *LoginUserOK) SetPayload(payload *models.LoginResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *LoginUserOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// LoginUserBadRequestCode is the HTTP code returned for type LoginUserBadRequest
const LoginUserBadRequestCode int = 400

/*
LoginUserBadRequest Bad request

swagger:response loginUserBadRequest
*/
type LoginUserBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewLoginUserBadRequest creates LoginUserBadRequest with default headers values
func NewLoginUserBadRequest() *LoginUserBadRequest {

	return &LoginUserBadRequest{}
}

// WithPayload adds the payload to the login user bad request response
func (o *LoginUserBadRequest) WithPayload(payload *models.Error) *LoginUserBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the login user bad request response
func (o *LoginUserBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *LoginUserBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// LoginUserForbiddenCode is the HTTP code returned for type LoginUserForbidden
const LoginUserForbiddenCode int = 403

/*
LoginUserForbidden Forbidden

swagger:response loginUserForbidden
*/
type LoginUserForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewLoginUserForbidden creates LoginUserForbidden with default headers values
func NewLoginUserForbidden() *LoginUserForbidden {

	return &LoginUserForbidden{}
}

// WithPayload adds the payload to the login user forbidden response
func (o *LoginUserForbidden) WithPayload(payload *models.Error) *LoginUserForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the login user forbidden response
func (o *LoginUserForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *LoginUserForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// LoginUserUnprocessableEntityCode is the HTTP code returned for type LoginUserUnprocessableEntity
const LoginUserUnprocessableEntityCode int = 422

/*
LoginUserUnprocessableEntity Unprocessable Entity

swagger:response loginUserUnprocessableEntity
*/
type LoginUserUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewLoginUserUnprocessableEntity creates LoginUserUnprocessableEntity with default headers values
func NewLoginUserUnprocessableEntity() *LoginUserUnprocessableEntity {

	return &LoginUserUnprocessableEntity{}
}

// WithPayload adds the payload to the login user unprocessable entity response
func (o *LoginUserUnprocessableEntity) WithPayload(payload *models.Error) *LoginUserUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the login user unprocessable entity response
func (o *LoginUserUnprocessableEntity) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *LoginUserUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// LoginUserInternalServerErrorCode is the HTTP code returned for type LoginUserInternalServerError
const LoginUserInternalServerErrorCode int = 500

/*
LoginUserInternalServerError Internal server error

swagger:response loginUserInternalServerError
*/
type LoginUserInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewLoginUserInternalServerError creates LoginUserInternalServerError with default headers values
func NewLoginUserInternalServerError() *LoginUserInternalServerError {

	return &LoginUserInternalServerError{}
}

// WithPayload adds the payload to the login user internal server error response
func (o *LoginUserInternalServerError) WithPayload(payload *models.Error) *LoginUserInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the login user internal server error response
func (o *LoginUserInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *LoginUserInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
