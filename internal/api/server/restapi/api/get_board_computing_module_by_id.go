// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	models "github.com/Maksim646/space_vpx_satellite/internal/api/definition"
)

// GetBoardComputingModuleByIDHandlerFunc turns a function with the right signature into a get board computing module by ID handler
type GetBoardComputingModuleByIDHandlerFunc func(GetBoardComputingModuleByIDParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn GetBoardComputingModuleByIDHandlerFunc) Handle(params GetBoardComputingModuleByIDParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// GetBoardComputingModuleByIDHandler interface for that can handle valid get board computing module by ID params
type GetBoardComputingModuleByIDHandler interface {
	Handle(GetBoardComputingModuleByIDParams, *models.Principal) middleware.Responder
}

// NewGetBoardComputingModuleByID creates a new http.Handler for the get board computing module by ID operation
func NewGetBoardComputingModuleByID(ctx *middleware.Context, handler GetBoardComputingModuleByIDHandler) *GetBoardComputingModuleByID {
	return &GetBoardComputingModuleByID{Context: ctx, Handler: handler}
}

/*
	GetBoardComputingModuleByID swagger:route GET /board_computing_module/{id} BoardComputingModule getBoardComputingModuleById

Get a Board Computing Module by ID
*/
type GetBoardComputingModuleByID struct {
	Context *middleware.Context
	Handler GetBoardComputingModuleByIDHandler
}

func (o *GetBoardComputingModuleByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetBoardComputingModuleByIDParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
