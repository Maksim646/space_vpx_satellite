// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	models "github.com/Maksim646/space_vpx_satellite/internal/api/definition"
)

// GetUserCubeSatProjectsHandlerFunc turns a function with the right signature into a get user cube sat projects handler
type GetUserCubeSatProjectsHandlerFunc func(GetUserCubeSatProjectsParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUserCubeSatProjectsHandlerFunc) Handle(params GetUserCubeSatProjectsParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// GetUserCubeSatProjectsHandler interface for that can handle valid get user cube sat projects params
type GetUserCubeSatProjectsHandler interface {
	Handle(GetUserCubeSatProjectsParams, *models.Principal) middleware.Responder
}

// NewGetUserCubeSatProjects creates a new http.Handler for the get user cube sat projects operation
func NewGetUserCubeSatProjects(ctx *middleware.Context, handler GetUserCubeSatProjectsHandler) *GetUserCubeSatProjects {
	return &GetUserCubeSatProjects{Context: ctx, Handler: handler}
}

/*
	GetUserCubeSatProjects swagger:route GET /projects/user_projects CubeSatProject getUserCubeSatProjects

Get user CubeSat projects
*/
type GetUserCubeSatProjects struct {
	Context *middleware.Context
	Handler GetUserCubeSatProjectsHandler
}

func (o *GetUserCubeSatProjects) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetUserCubeSatProjectsParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
