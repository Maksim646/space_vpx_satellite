// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	models "github.com/Maksim646/space_vpx_satellite/internal/api/definition"
)

// UpdateCubeSatSolarPanelSideByProjectReader is a Reader for the UpdateCubeSatSolarPanelSideByProject structure.
type UpdateCubeSatSolarPanelSideByProjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCubeSatSolarPanelSideByProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateCubeSatSolarPanelSideByProjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateCubeSatSolarPanelSideByProjectBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateCubeSatSolarPanelSideByProjectUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateCubeSatSolarPanelSideByProjectForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateCubeSatSolarPanelSideByProjectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateCubeSatSolarPanelSideByProjectUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateCubeSatSolarPanelSideByProjectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /projects/{project_id}/solar_panel_side] UpdateCubeSatSolarPanelSideByProject", response, response.Code())
	}
}

// NewUpdateCubeSatSolarPanelSideByProjectOK creates a UpdateCubeSatSolarPanelSideByProjectOK with default headers values
func NewUpdateCubeSatSolarPanelSideByProjectOK() *UpdateCubeSatSolarPanelSideByProjectOK {
	return &UpdateCubeSatSolarPanelSideByProjectOK{}
}

/*
UpdateCubeSatSolarPanelSideByProjectOK describes a response with status code 200, with default header values.

Successfully updated Solar Panel Side
*/
type UpdateCubeSatSolarPanelSideByProjectOK struct {
	Payload *models.CubeSatProject
}

// IsSuccess returns true when this update cube sat solar panel side by project o k response has a 2xx status code
func (o *UpdateCubeSatSolarPanelSideByProjectOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update cube sat solar panel side by project o k response has a 3xx status code
func (o *UpdateCubeSatSolarPanelSideByProjectOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cube sat solar panel side by project o k response has a 4xx status code
func (o *UpdateCubeSatSolarPanelSideByProjectOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update cube sat solar panel side by project o k response has a 5xx status code
func (o *UpdateCubeSatSolarPanelSideByProjectOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update cube sat solar panel side by project o k response a status code equal to that given
func (o *UpdateCubeSatSolarPanelSideByProjectOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update cube sat solar panel side by project o k response
func (o *UpdateCubeSatSolarPanelSideByProjectOK) Code() int {
	return 200
}

func (o *UpdateCubeSatSolarPanelSideByProjectOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /projects/{project_id}/solar_panel_side][%d] updateCubeSatSolarPanelSideByProjectOK %s", 200, payload)
}

func (o *UpdateCubeSatSolarPanelSideByProjectOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /projects/{project_id}/solar_panel_side][%d] updateCubeSatSolarPanelSideByProjectOK %s", 200, payload)
}

func (o *UpdateCubeSatSolarPanelSideByProjectOK) GetPayload() *models.CubeSatProject {
	return o.Payload
}

func (o *UpdateCubeSatSolarPanelSideByProjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CubeSatProject)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCubeSatSolarPanelSideByProjectBadRequest creates a UpdateCubeSatSolarPanelSideByProjectBadRequest with default headers values
func NewUpdateCubeSatSolarPanelSideByProjectBadRequest() *UpdateCubeSatSolarPanelSideByProjectBadRequest {
	return &UpdateCubeSatSolarPanelSideByProjectBadRequest{}
}

/*
UpdateCubeSatSolarPanelSideByProjectBadRequest describes a response with status code 400, with default header values.

Bad request (e.g., invalid input)
*/
type UpdateCubeSatSolarPanelSideByProjectBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update cube sat solar panel side by project bad request response has a 2xx status code
func (o *UpdateCubeSatSolarPanelSideByProjectBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update cube sat solar panel side by project bad request response has a 3xx status code
func (o *UpdateCubeSatSolarPanelSideByProjectBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cube sat solar panel side by project bad request response has a 4xx status code
func (o *UpdateCubeSatSolarPanelSideByProjectBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update cube sat solar panel side by project bad request response has a 5xx status code
func (o *UpdateCubeSatSolarPanelSideByProjectBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update cube sat solar panel side by project bad request response a status code equal to that given
func (o *UpdateCubeSatSolarPanelSideByProjectBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update cube sat solar panel side by project bad request response
func (o *UpdateCubeSatSolarPanelSideByProjectBadRequest) Code() int {
	return 400
}

func (o *UpdateCubeSatSolarPanelSideByProjectBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /projects/{project_id}/solar_panel_side][%d] updateCubeSatSolarPanelSideByProjectBadRequest %s", 400, payload)
}

func (o *UpdateCubeSatSolarPanelSideByProjectBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /projects/{project_id}/solar_panel_side][%d] updateCubeSatSolarPanelSideByProjectBadRequest %s", 400, payload)
}

func (o *UpdateCubeSatSolarPanelSideByProjectBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateCubeSatSolarPanelSideByProjectBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCubeSatSolarPanelSideByProjectUnauthorized creates a UpdateCubeSatSolarPanelSideByProjectUnauthorized with default headers values
func NewUpdateCubeSatSolarPanelSideByProjectUnauthorized() *UpdateCubeSatSolarPanelSideByProjectUnauthorized {
	return &UpdateCubeSatSolarPanelSideByProjectUnauthorized{}
}

/*
UpdateCubeSatSolarPanelSideByProjectUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateCubeSatSolarPanelSideByProjectUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this update cube sat solar panel side by project unauthorized response has a 2xx status code
func (o *UpdateCubeSatSolarPanelSideByProjectUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update cube sat solar panel side by project unauthorized response has a 3xx status code
func (o *UpdateCubeSatSolarPanelSideByProjectUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cube sat solar panel side by project unauthorized response has a 4xx status code
func (o *UpdateCubeSatSolarPanelSideByProjectUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update cube sat solar panel side by project unauthorized response has a 5xx status code
func (o *UpdateCubeSatSolarPanelSideByProjectUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update cube sat solar panel side by project unauthorized response a status code equal to that given
func (o *UpdateCubeSatSolarPanelSideByProjectUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update cube sat solar panel side by project unauthorized response
func (o *UpdateCubeSatSolarPanelSideByProjectUnauthorized) Code() int {
	return 401
}

func (o *UpdateCubeSatSolarPanelSideByProjectUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /projects/{project_id}/solar_panel_side][%d] updateCubeSatSolarPanelSideByProjectUnauthorized %s", 401, payload)
}

func (o *UpdateCubeSatSolarPanelSideByProjectUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /projects/{project_id}/solar_panel_side][%d] updateCubeSatSolarPanelSideByProjectUnauthorized %s", 401, payload)
}

func (o *UpdateCubeSatSolarPanelSideByProjectUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateCubeSatSolarPanelSideByProjectUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCubeSatSolarPanelSideByProjectForbidden creates a UpdateCubeSatSolarPanelSideByProjectForbidden with default headers values
func NewUpdateCubeSatSolarPanelSideByProjectForbidden() *UpdateCubeSatSolarPanelSideByProjectForbidden {
	return &UpdateCubeSatSolarPanelSideByProjectForbidden{}
}

/*
UpdateCubeSatSolarPanelSideByProjectForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateCubeSatSolarPanelSideByProjectForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this update cube sat solar panel side by project forbidden response has a 2xx status code
func (o *UpdateCubeSatSolarPanelSideByProjectForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update cube sat solar panel side by project forbidden response has a 3xx status code
func (o *UpdateCubeSatSolarPanelSideByProjectForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cube sat solar panel side by project forbidden response has a 4xx status code
func (o *UpdateCubeSatSolarPanelSideByProjectForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update cube sat solar panel side by project forbidden response has a 5xx status code
func (o *UpdateCubeSatSolarPanelSideByProjectForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update cube sat solar panel side by project forbidden response a status code equal to that given
func (o *UpdateCubeSatSolarPanelSideByProjectForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update cube sat solar panel side by project forbidden response
func (o *UpdateCubeSatSolarPanelSideByProjectForbidden) Code() int {
	return 403
}

func (o *UpdateCubeSatSolarPanelSideByProjectForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /projects/{project_id}/solar_panel_side][%d] updateCubeSatSolarPanelSideByProjectForbidden %s", 403, payload)
}

func (o *UpdateCubeSatSolarPanelSideByProjectForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /projects/{project_id}/solar_panel_side][%d] updateCubeSatSolarPanelSideByProjectForbidden %s", 403, payload)
}

func (o *UpdateCubeSatSolarPanelSideByProjectForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateCubeSatSolarPanelSideByProjectForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCubeSatSolarPanelSideByProjectNotFound creates a UpdateCubeSatSolarPanelSideByProjectNotFound with default headers values
func NewUpdateCubeSatSolarPanelSideByProjectNotFound() *UpdateCubeSatSolarPanelSideByProjectNotFound {
	return &UpdateCubeSatSolarPanelSideByProjectNotFound{}
}

/*
UpdateCubeSatSolarPanelSideByProjectNotFound describes a response with status code 404, with default header values.

Project not found
*/
type UpdateCubeSatSolarPanelSideByProjectNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update cube sat solar panel side by project not found response has a 2xx status code
func (o *UpdateCubeSatSolarPanelSideByProjectNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update cube sat solar panel side by project not found response has a 3xx status code
func (o *UpdateCubeSatSolarPanelSideByProjectNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cube sat solar panel side by project not found response has a 4xx status code
func (o *UpdateCubeSatSolarPanelSideByProjectNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update cube sat solar panel side by project not found response has a 5xx status code
func (o *UpdateCubeSatSolarPanelSideByProjectNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update cube sat solar panel side by project not found response a status code equal to that given
func (o *UpdateCubeSatSolarPanelSideByProjectNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update cube sat solar panel side by project not found response
func (o *UpdateCubeSatSolarPanelSideByProjectNotFound) Code() int {
	return 404
}

func (o *UpdateCubeSatSolarPanelSideByProjectNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /projects/{project_id}/solar_panel_side][%d] updateCubeSatSolarPanelSideByProjectNotFound %s", 404, payload)
}

func (o *UpdateCubeSatSolarPanelSideByProjectNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /projects/{project_id}/solar_panel_side][%d] updateCubeSatSolarPanelSideByProjectNotFound %s", 404, payload)
}

func (o *UpdateCubeSatSolarPanelSideByProjectNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateCubeSatSolarPanelSideByProjectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCubeSatSolarPanelSideByProjectUnprocessableEntity creates a UpdateCubeSatSolarPanelSideByProjectUnprocessableEntity with default headers values
func NewUpdateCubeSatSolarPanelSideByProjectUnprocessableEntity() *UpdateCubeSatSolarPanelSideByProjectUnprocessableEntity {
	return &UpdateCubeSatSolarPanelSideByProjectUnprocessableEntity{}
}

/*
UpdateCubeSatSolarPanelSideByProjectUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity (e.g., validation errors)
*/
type UpdateCubeSatSolarPanelSideByProjectUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this update cube sat solar panel side by project unprocessable entity response has a 2xx status code
func (o *UpdateCubeSatSolarPanelSideByProjectUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update cube sat solar panel side by project unprocessable entity response has a 3xx status code
func (o *UpdateCubeSatSolarPanelSideByProjectUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cube sat solar panel side by project unprocessable entity response has a 4xx status code
func (o *UpdateCubeSatSolarPanelSideByProjectUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update cube sat solar panel side by project unprocessable entity response has a 5xx status code
func (o *UpdateCubeSatSolarPanelSideByProjectUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update cube sat solar panel side by project unprocessable entity response a status code equal to that given
func (o *UpdateCubeSatSolarPanelSideByProjectUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update cube sat solar panel side by project unprocessable entity response
func (o *UpdateCubeSatSolarPanelSideByProjectUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateCubeSatSolarPanelSideByProjectUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /projects/{project_id}/solar_panel_side][%d] updateCubeSatSolarPanelSideByProjectUnprocessableEntity %s", 422, payload)
}

func (o *UpdateCubeSatSolarPanelSideByProjectUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /projects/{project_id}/solar_panel_side][%d] updateCubeSatSolarPanelSideByProjectUnprocessableEntity %s", 422, payload)
}

func (o *UpdateCubeSatSolarPanelSideByProjectUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateCubeSatSolarPanelSideByProjectUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCubeSatSolarPanelSideByProjectInternalServerError creates a UpdateCubeSatSolarPanelSideByProjectInternalServerError with default headers values
func NewUpdateCubeSatSolarPanelSideByProjectInternalServerError() *UpdateCubeSatSolarPanelSideByProjectInternalServerError {
	return &UpdateCubeSatSolarPanelSideByProjectInternalServerError{}
}

/*
UpdateCubeSatSolarPanelSideByProjectInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type UpdateCubeSatSolarPanelSideByProjectInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this update cube sat solar panel side by project internal server error response has a 2xx status code
func (o *UpdateCubeSatSolarPanelSideByProjectInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update cube sat solar panel side by project internal server error response has a 3xx status code
func (o *UpdateCubeSatSolarPanelSideByProjectInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cube sat solar panel side by project internal server error response has a 4xx status code
func (o *UpdateCubeSatSolarPanelSideByProjectInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update cube sat solar panel side by project internal server error response has a 5xx status code
func (o *UpdateCubeSatSolarPanelSideByProjectInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update cube sat solar panel side by project internal server error response a status code equal to that given
func (o *UpdateCubeSatSolarPanelSideByProjectInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update cube sat solar panel side by project internal server error response
func (o *UpdateCubeSatSolarPanelSideByProjectInternalServerError) Code() int {
	return 500
}

func (o *UpdateCubeSatSolarPanelSideByProjectInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /projects/{project_id}/solar_panel_side][%d] updateCubeSatSolarPanelSideByProjectInternalServerError %s", 500, payload)
}

func (o *UpdateCubeSatSolarPanelSideByProjectInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /projects/{project_id}/solar_panel_side][%d] updateCubeSatSolarPanelSideByProjectInternalServerError %s", 500, payload)
}

func (o *UpdateCubeSatSolarPanelSideByProjectInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateCubeSatSolarPanelSideByProjectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
