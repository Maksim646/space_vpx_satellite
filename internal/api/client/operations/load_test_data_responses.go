// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	models "github.com/Maksim646/space_vpx_satellite/internal/api/definition"
)

// LoadTestDataReader is a Reader for the LoadTestData structure.
type LoadTestDataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LoadTestDataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLoadTestDataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewLoadTestDataBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewLoadTestDataForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewLoadTestDataUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewLoadTestDataInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /test_data_load] LoadTestData", response, response.Code())
	}
}

// NewLoadTestDataOK creates a LoadTestDataOK with default headers values
func NewLoadTestDataOK() *LoadTestDataOK {
	return &LoadTestDataOK{}
}

/*
LoadTestDataOK describes a response with status code 200, with default header values.

Load Test Data response
*/
type LoadTestDataOK struct {
	Payload *models.Error
}

// IsSuccess returns true when this load test data o k response has a 2xx status code
func (o *LoadTestDataOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this load test data o k response has a 3xx status code
func (o *LoadTestDataOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this load test data o k response has a 4xx status code
func (o *LoadTestDataOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this load test data o k response has a 5xx status code
func (o *LoadTestDataOK) IsServerError() bool {
	return false
}

// IsCode returns true when this load test data o k response a status code equal to that given
func (o *LoadTestDataOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the load test data o k response
func (o *LoadTestDataOK) Code() int {
	return 200
}

func (o *LoadTestDataOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /test_data_load][%d] loadTestDataOK %s", 200, payload)
}

func (o *LoadTestDataOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /test_data_load][%d] loadTestDataOK %s", 200, payload)
}

func (o *LoadTestDataOK) GetPayload() *models.Error {
	return o.Payload
}

func (o *LoadTestDataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoadTestDataBadRequest creates a LoadTestDataBadRequest with default headers values
func NewLoadTestDataBadRequest() *LoadTestDataBadRequest {
	return &LoadTestDataBadRequest{}
}

/*
LoadTestDataBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type LoadTestDataBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this load test data bad request response has a 2xx status code
func (o *LoadTestDataBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this load test data bad request response has a 3xx status code
func (o *LoadTestDataBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this load test data bad request response has a 4xx status code
func (o *LoadTestDataBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this load test data bad request response has a 5xx status code
func (o *LoadTestDataBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this load test data bad request response a status code equal to that given
func (o *LoadTestDataBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the load test data bad request response
func (o *LoadTestDataBadRequest) Code() int {
	return 400
}

func (o *LoadTestDataBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /test_data_load][%d] loadTestDataBadRequest %s", 400, payload)
}

func (o *LoadTestDataBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /test_data_load][%d] loadTestDataBadRequest %s", 400, payload)
}

func (o *LoadTestDataBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *LoadTestDataBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoadTestDataForbidden creates a LoadTestDataForbidden with default headers values
func NewLoadTestDataForbidden() *LoadTestDataForbidden {
	return &LoadTestDataForbidden{}
}

/*
LoadTestDataForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type LoadTestDataForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this load test data forbidden response has a 2xx status code
func (o *LoadTestDataForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this load test data forbidden response has a 3xx status code
func (o *LoadTestDataForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this load test data forbidden response has a 4xx status code
func (o *LoadTestDataForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this load test data forbidden response has a 5xx status code
func (o *LoadTestDataForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this load test data forbidden response a status code equal to that given
func (o *LoadTestDataForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the load test data forbidden response
func (o *LoadTestDataForbidden) Code() int {
	return 403
}

func (o *LoadTestDataForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /test_data_load][%d] loadTestDataForbidden %s", 403, payload)
}

func (o *LoadTestDataForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /test_data_load][%d] loadTestDataForbidden %s", 403, payload)
}

func (o *LoadTestDataForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *LoadTestDataForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoadTestDataUnprocessableEntity creates a LoadTestDataUnprocessableEntity with default headers values
func NewLoadTestDataUnprocessableEntity() *LoadTestDataUnprocessableEntity {
	return &LoadTestDataUnprocessableEntity{}
}

/*
LoadTestDataUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type LoadTestDataUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this load test data unprocessable entity response has a 2xx status code
func (o *LoadTestDataUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this load test data unprocessable entity response has a 3xx status code
func (o *LoadTestDataUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this load test data unprocessable entity response has a 4xx status code
func (o *LoadTestDataUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this load test data unprocessable entity response has a 5xx status code
func (o *LoadTestDataUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this load test data unprocessable entity response a status code equal to that given
func (o *LoadTestDataUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the load test data unprocessable entity response
func (o *LoadTestDataUnprocessableEntity) Code() int {
	return 422
}

func (o *LoadTestDataUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /test_data_load][%d] loadTestDataUnprocessableEntity %s", 422, payload)
}

func (o *LoadTestDataUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /test_data_load][%d] loadTestDataUnprocessableEntity %s", 422, payload)
}

func (o *LoadTestDataUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *LoadTestDataUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoadTestDataInternalServerError creates a LoadTestDataInternalServerError with default headers values
func NewLoadTestDataInternalServerError() *LoadTestDataInternalServerError {
	return &LoadTestDataInternalServerError{}
}

/*
LoadTestDataInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type LoadTestDataInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this load test data internal server error response has a 2xx status code
func (o *LoadTestDataInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this load test data internal server error response has a 3xx status code
func (o *LoadTestDataInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this load test data internal server error response has a 4xx status code
func (o *LoadTestDataInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this load test data internal server error response has a 5xx status code
func (o *LoadTestDataInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this load test data internal server error response a status code equal to that given
func (o *LoadTestDataInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the load test data internal server error response
func (o *LoadTestDataInternalServerError) Code() int {
	return 500
}

func (o *LoadTestDataInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /test_data_load][%d] loadTestDataInternalServerError %s", 500, payload)
}

func (o *LoadTestDataInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /test_data_load][%d] loadTestDataInternalServerError %s", 500, payload)
}

func (o *LoadTestDataInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *LoadTestDataInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
