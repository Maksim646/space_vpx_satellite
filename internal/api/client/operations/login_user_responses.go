// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	models "github.com/Maksim646/space_vpx_satellite/internal/api/definition"
)

// LoginUserReader is a Reader for the LoginUser structure.
type LoginUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LoginUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLoginUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewLoginUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewLoginUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewLoginUserUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewLoginUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /auth/login] LoginUser", response, response.Code())
	}
}

// NewLoginUserOK creates a LoginUserOK with default headers values
func NewLoginUserOK() *LoginUserOK {
	return &LoginUserOK{}
}

/*
LoginUserOK describes a response with status code 200, with default header values.

Login Response
*/
type LoginUserOK struct {
	Payload *models.LoginResponse
}

// IsSuccess returns true when this login user o k response has a 2xx status code
func (o *LoginUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this login user o k response has a 3xx status code
func (o *LoginUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login user o k response has a 4xx status code
func (o *LoginUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this login user o k response has a 5xx status code
func (o *LoginUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this login user o k response a status code equal to that given
func (o *LoginUserOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the login user o k response
func (o *LoginUserOK) Code() int {
	return 200
}

func (o *LoginUserOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/login][%d] loginUserOK %s", 200, payload)
}

func (o *LoginUserOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/login][%d] loginUserOK %s", 200, payload)
}

func (o *LoginUserOK) GetPayload() *models.LoginResponse {
	return o.Payload
}

func (o *LoginUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LoginResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoginUserBadRequest creates a LoginUserBadRequest with default headers values
func NewLoginUserBadRequest() *LoginUserBadRequest {
	return &LoginUserBadRequest{}
}

/*
LoginUserBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type LoginUserBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this login user bad request response has a 2xx status code
func (o *LoginUserBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login user bad request response has a 3xx status code
func (o *LoginUserBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login user bad request response has a 4xx status code
func (o *LoginUserBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this login user bad request response has a 5xx status code
func (o *LoginUserBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this login user bad request response a status code equal to that given
func (o *LoginUserBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the login user bad request response
func (o *LoginUserBadRequest) Code() int {
	return 400
}

func (o *LoginUserBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/login][%d] loginUserBadRequest %s", 400, payload)
}

func (o *LoginUserBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/login][%d] loginUserBadRequest %s", 400, payload)
}

func (o *LoginUserBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *LoginUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoginUserForbidden creates a LoginUserForbidden with default headers values
func NewLoginUserForbidden() *LoginUserForbidden {
	return &LoginUserForbidden{}
}

/*
LoginUserForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type LoginUserForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this login user forbidden response has a 2xx status code
func (o *LoginUserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login user forbidden response has a 3xx status code
func (o *LoginUserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login user forbidden response has a 4xx status code
func (o *LoginUserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this login user forbidden response has a 5xx status code
func (o *LoginUserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this login user forbidden response a status code equal to that given
func (o *LoginUserForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the login user forbidden response
func (o *LoginUserForbidden) Code() int {
	return 403
}

func (o *LoginUserForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/login][%d] loginUserForbidden %s", 403, payload)
}

func (o *LoginUserForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/login][%d] loginUserForbidden %s", 403, payload)
}

func (o *LoginUserForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *LoginUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoginUserUnprocessableEntity creates a LoginUserUnprocessableEntity with default headers values
func NewLoginUserUnprocessableEntity() *LoginUserUnprocessableEntity {
	return &LoginUserUnprocessableEntity{}
}

/*
LoginUserUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type LoginUserUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this login user unprocessable entity response has a 2xx status code
func (o *LoginUserUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login user unprocessable entity response has a 3xx status code
func (o *LoginUserUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login user unprocessable entity response has a 4xx status code
func (o *LoginUserUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this login user unprocessable entity response has a 5xx status code
func (o *LoginUserUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this login user unprocessable entity response a status code equal to that given
func (o *LoginUserUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the login user unprocessable entity response
func (o *LoginUserUnprocessableEntity) Code() int {
	return 422
}

func (o *LoginUserUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/login][%d] loginUserUnprocessableEntity %s", 422, payload)
}

func (o *LoginUserUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/login][%d] loginUserUnprocessableEntity %s", 422, payload)
}

func (o *LoginUserUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *LoginUserUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoginUserInternalServerError creates a LoginUserInternalServerError with default headers values
func NewLoginUserInternalServerError() *LoginUserInternalServerError {
	return &LoginUserInternalServerError{}
}

/*
LoginUserInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type LoginUserInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this login user internal server error response has a 2xx status code
func (o *LoginUserInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login user internal server error response has a 3xx status code
func (o *LoginUserInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login user internal server error response has a 4xx status code
func (o *LoginUserInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this login user internal server error response has a 5xx status code
func (o *LoginUserInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this login user internal server error response a status code equal to that given
func (o *LoginUserInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the login user internal server error response
func (o *LoginUserInternalServerError) Code() int {
	return 500
}

func (o *LoginUserInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/login][%d] loginUserInternalServerError %s", 500, payload)
}

func (o *LoginUserInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/login][%d] loginUserInternalServerError %s", 500, payload)
}

func (o *LoginUserInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *LoginUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
