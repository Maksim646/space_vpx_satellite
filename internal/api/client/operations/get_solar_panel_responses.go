// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	models "github.com/Maksim646/space_vpx_satellite/internal/api/definition"
)

// GetSolarPanelReader is a Reader for the GetSolarPanel structure.
type GetSolarPanelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSolarPanelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSolarPanelOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSolarPanelBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSolarPanelForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewGetSolarPanelUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSolarPanelInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /solar_panel/{id}] GetSolarPanel", response, response.Code())
	}
}

// NewGetSolarPanelOK creates a GetSolarPanelOK with default headers values
func NewGetSolarPanelOK() *GetSolarPanelOK {
	return &GetSolarPanelOK{}
}

/*
GetSolarPanelOK describes a response with status code 200, with default header values.

Get SolarPanel Response
*/
type GetSolarPanelOK struct {
	Payload *models.SolarPanel
}

// IsSuccess returns true when this get solar panel o k response has a 2xx status code
func (o *GetSolarPanelOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get solar panel o k response has a 3xx status code
func (o *GetSolarPanelOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get solar panel o k response has a 4xx status code
func (o *GetSolarPanelOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get solar panel o k response has a 5xx status code
func (o *GetSolarPanelOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get solar panel o k response a status code equal to that given
func (o *GetSolarPanelOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get solar panel o k response
func (o *GetSolarPanelOK) Code() int {
	return 200
}

func (o *GetSolarPanelOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /solar_panel/{id}][%d] getSolarPanelOK %s", 200, payload)
}

func (o *GetSolarPanelOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /solar_panel/{id}][%d] getSolarPanelOK %s", 200, payload)
}

func (o *GetSolarPanelOK) GetPayload() *models.SolarPanel {
	return o.Payload
}

func (o *GetSolarPanelOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SolarPanel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSolarPanelBadRequest creates a GetSolarPanelBadRequest with default headers values
func NewGetSolarPanelBadRequest() *GetSolarPanelBadRequest {
	return &GetSolarPanelBadRequest{}
}

/*
GetSolarPanelBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetSolarPanelBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get solar panel bad request response has a 2xx status code
func (o *GetSolarPanelBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get solar panel bad request response has a 3xx status code
func (o *GetSolarPanelBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get solar panel bad request response has a 4xx status code
func (o *GetSolarPanelBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get solar panel bad request response has a 5xx status code
func (o *GetSolarPanelBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get solar panel bad request response a status code equal to that given
func (o *GetSolarPanelBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get solar panel bad request response
func (o *GetSolarPanelBadRequest) Code() int {
	return 400
}

func (o *GetSolarPanelBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /solar_panel/{id}][%d] getSolarPanelBadRequest %s", 400, payload)
}

func (o *GetSolarPanelBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /solar_panel/{id}][%d] getSolarPanelBadRequest %s", 400, payload)
}

func (o *GetSolarPanelBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetSolarPanelBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSolarPanelForbidden creates a GetSolarPanelForbidden with default headers values
func NewGetSolarPanelForbidden() *GetSolarPanelForbidden {
	return &GetSolarPanelForbidden{}
}

/*
GetSolarPanelForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetSolarPanelForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get solar panel forbidden response has a 2xx status code
func (o *GetSolarPanelForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get solar panel forbidden response has a 3xx status code
func (o *GetSolarPanelForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get solar panel forbidden response has a 4xx status code
func (o *GetSolarPanelForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get solar panel forbidden response has a 5xx status code
func (o *GetSolarPanelForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get solar panel forbidden response a status code equal to that given
func (o *GetSolarPanelForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get solar panel forbidden response
func (o *GetSolarPanelForbidden) Code() int {
	return 403
}

func (o *GetSolarPanelForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /solar_panel/{id}][%d] getSolarPanelForbidden %s", 403, payload)
}

func (o *GetSolarPanelForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /solar_panel/{id}][%d] getSolarPanelForbidden %s", 403, payload)
}

func (o *GetSolarPanelForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetSolarPanelForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSolarPanelUnprocessableEntity creates a GetSolarPanelUnprocessableEntity with default headers values
func NewGetSolarPanelUnprocessableEntity() *GetSolarPanelUnprocessableEntity {
	return &GetSolarPanelUnprocessableEntity{}
}

/*
GetSolarPanelUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type GetSolarPanelUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this get solar panel unprocessable entity response has a 2xx status code
func (o *GetSolarPanelUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get solar panel unprocessable entity response has a 3xx status code
func (o *GetSolarPanelUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get solar panel unprocessable entity response has a 4xx status code
func (o *GetSolarPanelUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this get solar panel unprocessable entity response has a 5xx status code
func (o *GetSolarPanelUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this get solar panel unprocessable entity response a status code equal to that given
func (o *GetSolarPanelUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the get solar panel unprocessable entity response
func (o *GetSolarPanelUnprocessableEntity) Code() int {
	return 422
}

func (o *GetSolarPanelUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /solar_panel/{id}][%d] getSolarPanelUnprocessableEntity %s", 422, payload)
}

func (o *GetSolarPanelUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /solar_panel/{id}][%d] getSolarPanelUnprocessableEntity %s", 422, payload)
}

func (o *GetSolarPanelUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetSolarPanelUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSolarPanelInternalServerError creates a GetSolarPanelInternalServerError with default headers values
func NewGetSolarPanelInternalServerError() *GetSolarPanelInternalServerError {
	return &GetSolarPanelInternalServerError{}
}

/*
GetSolarPanelInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetSolarPanelInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get solar panel internal server error response has a 2xx status code
func (o *GetSolarPanelInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get solar panel internal server error response has a 3xx status code
func (o *GetSolarPanelInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get solar panel internal server error response has a 4xx status code
func (o *GetSolarPanelInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get solar panel internal server error response has a 5xx status code
func (o *GetSolarPanelInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get solar panel internal server error response a status code equal to that given
func (o *GetSolarPanelInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get solar panel internal server error response
func (o *GetSolarPanelInternalServerError) Code() int {
	return 500
}

func (o *GetSolarPanelInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /solar_panel/{id}][%d] getSolarPanelInternalServerError %s", 500, payload)
}

func (o *GetSolarPanelInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /solar_panel/{id}][%d] getSolarPanelInternalServerError %s", 500, payload)
}

func (o *GetSolarPanelInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetSolarPanelInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
