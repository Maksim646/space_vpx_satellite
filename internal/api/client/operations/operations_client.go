// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new operations API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new operations API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateChassisVPX(params *CreateChassisVPXParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateChassisVPXOK, error)

	CreateCubeSatFrame(params *CreateCubeSatFrameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCubeSatFrameOK, error)

	CreateCubeSatProject(params *CreateCubeSatProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCubeSatProjectOK, error)

	CreatePowerSystem(params *CreatePowerSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePowerSystemOK, error)

	CreateSolarPanelSide(params *CreateSolarPanelSideParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSolarPanelSideOK, error)

	CreateSolarPanelTop(params *CreateSolarPanelTopParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSolarPanelTopOK, error)

	DeleteChassisVPX(params *DeleteChassisVPXParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteChassisVPXOK, error)

	DeleteCubeSatFrame(params *DeleteCubeSatFrameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCubeSatFrameOK, error)

	DeleteCubeSatPowerSystem(params *DeleteCubeSatPowerSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCubeSatPowerSystemOK, error)

	DeleteCubeSatProject(params *DeleteCubeSatProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCubeSatProjectOK, error)

	DeleteCubeSatSolarPanelSide(params *DeleteCubeSatSolarPanelSideParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCubeSatSolarPanelSideOK, error)

	DeleteCubeSatSolarPanelTop(params *DeleteCubeSatSolarPanelTopParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCubeSatSolarPanelTopOK, error)

	GetCubeSatProject(params *GetCubeSatProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCubeSatProjectOK, error)

	GetAvailableChassisVPX(params *GetAvailableChassisVPXParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAvailableChassisVPXOK, error)

	GetChassisVPXByID(params *GetChassisVPXByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetChassisVPXByIDOK, error)

	GetCubeSatFrame(params *GetCubeSatFrameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCubeSatFrameOK, error)

	GetCubeSatFrames(params *GetCubeSatFramesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCubeSatFramesOK, error)

	GetCubeSatPowerSystems(params *GetCubeSatPowerSystemsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCubeSatPowerSystemsOK, error)

	GetCubeSatSolarPanelsSide(params *GetCubeSatSolarPanelsSideParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCubeSatSolarPanelsSideOK, error)

	GetCubeSatSolarPanelsTop(params *GetCubeSatSolarPanelsTopParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCubeSatSolarPanelsTopOK, error)

	GetPowerSystem(params *GetPowerSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPowerSystemOK, error)

	GetSolarPanelSide(params *GetSolarPanelSideParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSolarPanelSideOK, error)

	GetSolarPanelTop(params *GetSolarPanelTopParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSolarPanelTopOK, error)

	GetUserCubeSatProjects(params *GetUserCubeSatProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserCubeSatProjectsOK, error)

	GetUserMe(params *GetUserMeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserMeOK, error)

	LoginAdmin(params *LoginAdminParams, opts ...ClientOption) (*LoginAdminOK, error)

	LoginUser(params *LoginUserParams, opts ...ClientOption) (*LoginUserOK, error)

	RegisterUser(params *RegisterUserParams, opts ...ClientOption) (*RegisterUserOK, error)

	UpdateChassisVPX(params *UpdateChassisVPXParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateChassisVPXOK, error)

	UpdateCubeSatFrame(params *UpdateCubeSatFrameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCubeSatFrameOK, error)

	UpdateCubeSatPowerSystem(params *UpdateCubeSatPowerSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCubeSatPowerSystemOK, error)

	UpdateCubeSatProject(params *UpdateCubeSatProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCubeSatProjectOK, error)

	UpdateCubeSatSolarPanelSide(params *UpdateCubeSatSolarPanelSideParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCubeSatSolarPanelSideOK, error)

	UpdateCubeSatSolarPanelTop(params *UpdateCubeSatSolarPanelTopParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCubeSatSolarPanelTopOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateChassisVPX creates chasis
*/
func (a *Client) CreateChassisVPX(params *CreateChassisVPXParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateChassisVPXOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateChassisVPXParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateChassisVPX",
		Method:             "POST",
		PathPattern:        "/chassis_vpx",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateChassisVPXReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateChassisVPXOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateChassisVPX: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateCubeSatFrame creates cube sat frame
*/
func (a *Client) CreateCubeSatFrame(params *CreateCubeSatFrameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCubeSatFrameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCubeSatFrameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateCubeSatFrame",
		Method:             "POST",
		PathPattern:        "/cube_sat_frame",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCubeSatFrameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCubeSatFrameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateCubeSatFrame: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateCubeSatProject creates cube sat project
*/
func (a *Client) CreateCubeSatProject(params *CreateCubeSatProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCubeSatProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCubeSatProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateCubeSatProject",
		Method:             "POST",
		PathPattern:        "/cube_sat_project",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCubeSatProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCubeSatProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateCubeSatProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreatePowerSystem creates power system
*/
func (a *Client) CreatePowerSystem(params *CreatePowerSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePowerSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePowerSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreatePowerSystem",
		Method:             "POST",
		PathPattern:        "/cube_sat_power_system",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreatePowerSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePowerSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreatePowerSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSolarPanelSide creates solar panel side
*/
func (a *Client) CreateSolarPanelSide(params *CreateSolarPanelSideParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSolarPanelSideOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSolarPanelSideParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateSolarPanelSide",
		Method:             "POST",
		PathPattern:        "/solar_panel_side",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSolarPanelSideReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSolarPanelSideOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateSolarPanelSide: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSolarPanelTop creates solar panel top
*/
func (a *Client) CreateSolarPanelTop(params *CreateSolarPanelTopParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSolarPanelTopOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSolarPanelTopParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateSolarPanelTop",
		Method:             "POST",
		PathPattern:        "/solar_panel_top",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSolarPanelTopReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSolarPanelTopOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateSolarPanelTop: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteChassisVPX deletes chassis v p x by ID
*/
func (a *Client) DeleteChassisVPX(params *DeleteChassisVPXParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteChassisVPXOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteChassisVPXParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteChassisVPX",
		Method:             "DELETE",
		PathPattern:        "/chassis_vpx/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteChassisVPXReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteChassisVPXOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteChassisVPX: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteCubeSatFrame deletes cube sat frame
*/
func (a *Client) DeleteCubeSatFrame(params *DeleteCubeSatFrameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCubeSatFrameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCubeSatFrameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteCubeSatFrame",
		Method:             "DELETE",
		PathPattern:        "/cube_sat_frame/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCubeSatFrameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCubeSatFrameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteCubeSatFrame: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteCubeSatPowerSystem deletes cube sat power system
*/
func (a *Client) DeleteCubeSatPowerSystem(params *DeleteCubeSatPowerSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCubeSatPowerSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCubeSatPowerSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteCubeSatPowerSystem",
		Method:             "DELETE",
		PathPattern:        "/cube_sat_power_system/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCubeSatPowerSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCubeSatPowerSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteCubeSatPowerSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteCubeSatProject deletes cube sat project
*/
func (a *Client) DeleteCubeSatProject(params *DeleteCubeSatProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCubeSatProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCubeSatProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteCubeSatProject",
		Method:             "DELETE",
		PathPattern:        "/project/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCubeSatProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCubeSatProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteCubeSatProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteCubeSatSolarPanelSide deletes cube sat solar panel side
*/
func (a *Client) DeleteCubeSatSolarPanelSide(params *DeleteCubeSatSolarPanelSideParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCubeSatSolarPanelSideOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCubeSatSolarPanelSideParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteCubeSatSolarPanelSide",
		Method:             "DELETE",
		PathPattern:        "/solar_panel_side/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCubeSatSolarPanelSideReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCubeSatSolarPanelSideOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteCubeSatSolarPanelSide: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteCubeSatSolarPanelTop deletes cube sat solar panel top
*/
func (a *Client) DeleteCubeSatSolarPanelTop(params *DeleteCubeSatSolarPanelTopParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCubeSatSolarPanelTopOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCubeSatSolarPanelTopParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteCubeSatSolarPanelTop",
		Method:             "DELETE",
		PathPattern:        "/solar_panel_top/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCubeSatSolarPanelTopReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCubeSatSolarPanelTopOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteCubeSatSolarPanelTop: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCubeSatProject gets cube sat project
*/
func (a *Client) GetCubeSatProject(params *GetCubeSatProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCubeSatProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCubeSatProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Get CubeSat Project",
		Method:             "GET",
		PathPattern:        "/project/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCubeSatProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCubeSatProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Get CubeSat Project: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAvailableChassisVPX gets available chassis v p x
*/
func (a *Client) GetAvailableChassisVPX(params *GetAvailableChassisVPXParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAvailableChassisVPXOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAvailableChassisVPXParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAvailableChassisVPX",
		Method:             "GET",
		PathPattern:        "/chassis_vpx/available_chassis",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAvailableChassisVPXReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAvailableChassisVPXOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAvailableChassisVPX: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetChassisVPXByID gets chassis v p x by ID
*/
func (a *Client) GetChassisVPXByID(params *GetChassisVPXByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetChassisVPXByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChassisVPXByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetChassisVPXByID",
		Method:             "GET",
		PathPattern:        "/chassis_vpx/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetChassisVPXByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChassisVPXByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetChassisVPXByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCubeSatFrame gets cube sat frame
*/
func (a *Client) GetCubeSatFrame(params *GetCubeSatFrameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCubeSatFrameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCubeSatFrameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCubeSatFrame",
		Method:             "GET",
		PathPattern:        "/cube_sat_frame/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCubeSatFrameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCubeSatFrameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCubeSatFrame: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCubeSatFrames gets cube sat frames
*/
func (a *Client) GetCubeSatFrames(params *GetCubeSatFramesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCubeSatFramesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCubeSatFramesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCubeSatFrames",
		Method:             "GET",
		PathPattern:        "/cube_sat_frame/available_cube_sat_frame",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCubeSatFramesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCubeSatFramesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCubeSatFrames: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCubeSatPowerSystems gets cube sat power systems
*/
func (a *Client) GetCubeSatPowerSystems(params *GetCubeSatPowerSystemsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCubeSatPowerSystemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCubeSatPowerSystemsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCubeSatPowerSystems",
		Method:             "GET",
		PathPattern:        "/cube_sat_power_system/available_power_systems",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCubeSatPowerSystemsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCubeSatPowerSystemsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCubeSatPowerSystems: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCubeSatSolarPanelsSide gets cube sat solar panels side
*/
func (a *Client) GetCubeSatSolarPanelsSide(params *GetCubeSatSolarPanelsSideParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCubeSatSolarPanelsSideOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCubeSatSolarPanelsSideParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCubeSatSolarPanelsSide",
		Method:             "GET",
		PathPattern:        "/solar_panel_side/available_solar_panel_side",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCubeSatSolarPanelsSideReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCubeSatSolarPanelsSideOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCubeSatSolarPanelsSide: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCubeSatSolarPanelsTop gets cube sat solar panels top
*/
func (a *Client) GetCubeSatSolarPanelsTop(params *GetCubeSatSolarPanelsTopParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCubeSatSolarPanelsTopOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCubeSatSolarPanelsTopParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCubeSatSolarPanelsTop",
		Method:             "GET",
		PathPattern:        "/solar_panel_top/available_solar_panel_top",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCubeSatSolarPanelsTopReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCubeSatSolarPanelsTopOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCubeSatSolarPanelsTop: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPowerSystem gets power system
*/
func (a *Client) GetPowerSystem(params *GetPowerSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPowerSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPowerSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPowerSystem",
		Method:             "GET",
		PathPattern:        "/cube_sat_power_system/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPowerSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPowerSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPowerSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSolarPanelSide gets solar panel side
*/
func (a *Client) GetSolarPanelSide(params *GetSolarPanelSideParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSolarPanelSideOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSolarPanelSideParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSolarPanelSide",
		Method:             "GET",
		PathPattern:        "/solar_panel_side/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSolarPanelSideReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSolarPanelSideOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSolarPanelSide: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSolarPanelTop gets solar panel top
*/
func (a *Client) GetSolarPanelTop(params *GetSolarPanelTopParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSolarPanelTopOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSolarPanelTopParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSolarPanelTop",
		Method:             "GET",
		PathPattern:        "/solar_panel_top/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSolarPanelTopReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSolarPanelTopOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSolarPanelTop: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUserCubeSatProjects gets user cube sat projects
*/
func (a *Client) GetUserCubeSatProjects(params *GetUserCubeSatProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserCubeSatProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserCubeSatProjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUserCubeSatProjects",
		Method:             "GET",
		PathPattern:        "/projects/user_projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserCubeSatProjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserCubeSatProjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUserCubeSatProjects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUserMe gets user me
*/
func (a *Client) GetUserMe(params *GetUserMeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserMeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserMeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUserMe",
		Method:             "GET",
		PathPattern:        "/user/get_me",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserMeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserMeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUserMe: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LoginAdmin logins admin
*/
func (a *Client) LoginAdmin(params *LoginAdminParams, opts ...ClientOption) (*LoginAdminOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoginAdminParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "LoginAdmin",
		Method:             "POST",
		PathPattern:        "/auth/admin_login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoginAdminReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoginAdminOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LoginAdmin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LoginUser logins user
*/
func (a *Client) LoginUser(params *LoginUserParams, opts ...ClientOption) (*LoginUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoginUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "LoginUser",
		Method:             "POST",
		PathPattern:        "/auth/login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoginUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoginUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LoginUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RegisterUser registers user
*/
func (a *Client) RegisterUser(params *RegisterUserParams, opts ...ClientOption) (*RegisterUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RegisterUser",
		Method:             "POST",
		PathPattern:        "/auth/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RegisterUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RegisterUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RegisterUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateChassisVPX updates chassis v p x
*/
func (a *Client) UpdateChassisVPX(params *UpdateChassisVPXParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateChassisVPXOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateChassisVPXParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateChassisVPX",
		Method:             "PATCH",
		PathPattern:        "/chassis_vpx/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateChassisVPXReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateChassisVPXOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateChassisVPX: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateCubeSatFrame updates cube sat frame
*/
func (a *Client) UpdateCubeSatFrame(params *UpdateCubeSatFrameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCubeSatFrameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCubeSatFrameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateCubeSatFrame",
		Method:             "PATCH",
		PathPattern:        "/cube_sat_frame/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCubeSatFrameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCubeSatFrameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateCubeSatFrame: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateCubeSatPowerSystem updates cube sat power system
*/
func (a *Client) UpdateCubeSatPowerSystem(params *UpdateCubeSatPowerSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCubeSatPowerSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCubeSatPowerSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateCubeSatPowerSystem",
		Method:             "PATCH",
		PathPattern:        "/cube_sat_power_system/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCubeSatPowerSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCubeSatPowerSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateCubeSatPowerSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateCubeSatProject updates cube sat project
*/
func (a *Client) UpdateCubeSatProject(params *UpdateCubeSatProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCubeSatProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCubeSatProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateCubeSatProject",
		Method:             "PATCH",
		PathPattern:        "/project/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCubeSatProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCubeSatProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateCubeSatProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateCubeSatSolarPanelSide updates cube sat solar panel side
*/
func (a *Client) UpdateCubeSatSolarPanelSide(params *UpdateCubeSatSolarPanelSideParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCubeSatSolarPanelSideOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCubeSatSolarPanelSideParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateCubeSatSolarPanelSide",
		Method:             "PATCH",
		PathPattern:        "/solar_panel_side/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCubeSatSolarPanelSideReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCubeSatSolarPanelSideOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateCubeSatSolarPanelSide: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateCubeSatSolarPanelTop updates cube sat solar panel top
*/
func (a *Client) UpdateCubeSatSolarPanelTop(params *UpdateCubeSatSolarPanelTopParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCubeSatSolarPanelTopOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCubeSatSolarPanelTopParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateCubeSatSolarPanelTop",
		Method:             "PATCH",
		PathPattern:        "/solar_panel_top/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCubeSatSolarPanelTopReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCubeSatSolarPanelTopOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateCubeSatSolarPanelTop: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
