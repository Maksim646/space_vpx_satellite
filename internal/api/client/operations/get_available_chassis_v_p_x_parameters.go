// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAvailableChassisVPXParams creates a new GetAvailableChassisVPXParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAvailableChassisVPXParams() *GetAvailableChassisVPXParams {
	return &GetAvailableChassisVPXParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAvailableChassisVPXParamsWithTimeout creates a new GetAvailableChassisVPXParams object
// with the ability to set a timeout on a request.
func NewGetAvailableChassisVPXParamsWithTimeout(timeout time.Duration) *GetAvailableChassisVPXParams {
	return &GetAvailableChassisVPXParams{
		timeout: timeout,
	}
}

// NewGetAvailableChassisVPXParamsWithContext creates a new GetAvailableChassisVPXParams object
// with the ability to set a context for a request.
func NewGetAvailableChassisVPXParamsWithContext(ctx context.Context) *GetAvailableChassisVPXParams {
	return &GetAvailableChassisVPXParams{
		Context: ctx,
	}
}

// NewGetAvailableChassisVPXParamsWithHTTPClient creates a new GetAvailableChassisVPXParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAvailableChassisVPXParamsWithHTTPClient(client *http.Client) *GetAvailableChassisVPXParams {
	return &GetAvailableChassisVPXParams{
		HTTPClient: client,
	}
}

/*
GetAvailableChassisVPXParams contains all the parameters to send to the API endpoint

	for the get available chassis v p x operation.

	Typically these are written to a http.Request.
*/
type GetAvailableChassisVPXParams struct {

	/* FilterChassisVPXByMaxHeightFrom.

	   Filter By Max Height
	*/
	FilterChassisVPXByMaxHeightFrom *float64

	/* FilterChassisVPXByMaxLengthFrom.

	   Filter By Max Lenghth
	*/
	FilterChassisVPXByMaxLengthFrom *float64

	/* FilterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom.

	   Filter By Max Power Handling Capability Per Board
	*/
	FilterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom *float64

	/* FilterChassisVPXByMaxTemperaturePerBoardFrom.

	   Filter By Max Temperature Per Board
	*/
	FilterChassisVPXByMaxTemperaturePerBoardFrom *float64

	/* FilterChassisVPXByMaxWeightFrom.

	   Filter By Max Weight
	*/
	FilterChassisVPXByMaxWeightFrom *float64

	/* FilterChassisVPXByMaxWidthFrom.

	   Filter By Max Width
	*/
	FilterChassisVPXByMaxWidthFrom *float64

	/* FilterChassisVPXByMinHeightTo.

	   Filter By Min Height
	*/
	FilterChassisVPXByMinHeightTo *float64

	/* FilterChassisVPXByMinLengthTo.

	   Filter By Min Length
	*/
	FilterChassisVPXByMinLengthTo *float64

	/* FilterChassisVPXByMinPowerHandlingCapabilityPerBoardTo.

	   Filter By Min Power Handling Capability Per Board
	*/
	FilterChassisVPXByMinPowerHandlingCapabilityPerBoardTo *float64

	/* FilterChassisVPXByMinTemperaturePerBoardTo.

	   Filter By Min Temperature Per Board
	*/
	FilterChassisVPXByMinTemperaturePerBoardTo *float64

	/* FilterChassisVPXByMinWeightTo.

	   Filter By Min Weight
	*/
	FilterChassisVPXByMinWeightTo *float64

	/* FilterChassisVPXByMinWidthTo.

	   Filter By Min Width
	*/
	FilterChassisVPXByMinWidthTo *float64

	/* Limit.

	   Offset Configs
	*/
	Limit int64

	/* Offset.

	   Offset Configs
	*/
	Offset int64

	/* SortField.

	   sort parametrs
	*/
	SortField *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get available chassis v p x params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAvailableChassisVPXParams) WithDefaults() *GetAvailableChassisVPXParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get available chassis v p x params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAvailableChassisVPXParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) WithTimeout(timeout time.Duration) *GetAvailableChassisVPXParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) WithContext(ctx context.Context) *GetAvailableChassisVPXParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) WithHTTPClient(client *http.Client) *GetAvailableChassisVPXParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilterChassisVPXByMaxHeightFrom adds the filterChassisVPXByMaxHeightFrom to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) WithFilterChassisVPXByMaxHeightFrom(filterChassisVPXByMaxHeightFrom *float64) *GetAvailableChassisVPXParams {
	o.SetFilterChassisVPXByMaxHeightFrom(filterChassisVPXByMaxHeightFrom)
	return o
}

// SetFilterChassisVPXByMaxHeightFrom adds the filterChassisVPXByMaxHeightFrom to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) SetFilterChassisVPXByMaxHeightFrom(filterChassisVPXByMaxHeightFrom *float64) {
	o.FilterChassisVPXByMaxHeightFrom = filterChassisVPXByMaxHeightFrom
}

// WithFilterChassisVPXByMaxLengthFrom adds the filterChassisVPXByMaxLengthFrom to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) WithFilterChassisVPXByMaxLengthFrom(filterChassisVPXByMaxLengthFrom *float64) *GetAvailableChassisVPXParams {
	o.SetFilterChassisVPXByMaxLengthFrom(filterChassisVPXByMaxLengthFrom)
	return o
}

// SetFilterChassisVPXByMaxLengthFrom adds the filterChassisVPXByMaxLengthFrom to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) SetFilterChassisVPXByMaxLengthFrom(filterChassisVPXByMaxLengthFrom *float64) {
	o.FilterChassisVPXByMaxLengthFrom = filterChassisVPXByMaxLengthFrom
}

// WithFilterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom adds the filterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) WithFilterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom(filterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom *float64) *GetAvailableChassisVPXParams {
	o.SetFilterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom(filterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom)
	return o
}

// SetFilterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom adds the filterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) SetFilterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom(filterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom *float64) {
	o.FilterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom = filterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom
}

// WithFilterChassisVPXByMaxTemperaturePerBoardFrom adds the filterChassisVPXByMaxTemperaturePerBoardFrom to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) WithFilterChassisVPXByMaxTemperaturePerBoardFrom(filterChassisVPXByMaxTemperaturePerBoardFrom *float64) *GetAvailableChassisVPXParams {
	o.SetFilterChassisVPXByMaxTemperaturePerBoardFrom(filterChassisVPXByMaxTemperaturePerBoardFrom)
	return o
}

// SetFilterChassisVPXByMaxTemperaturePerBoardFrom adds the filterChassisVPXByMaxTemperaturePerBoardFrom to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) SetFilterChassisVPXByMaxTemperaturePerBoardFrom(filterChassisVPXByMaxTemperaturePerBoardFrom *float64) {
	o.FilterChassisVPXByMaxTemperaturePerBoardFrom = filterChassisVPXByMaxTemperaturePerBoardFrom
}

// WithFilterChassisVPXByMaxWeightFrom adds the filterChassisVPXByMaxWeightFrom to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) WithFilterChassisVPXByMaxWeightFrom(filterChassisVPXByMaxWeightFrom *float64) *GetAvailableChassisVPXParams {
	o.SetFilterChassisVPXByMaxWeightFrom(filterChassisVPXByMaxWeightFrom)
	return o
}

// SetFilterChassisVPXByMaxWeightFrom adds the filterChassisVPXByMaxWeightFrom to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) SetFilterChassisVPXByMaxWeightFrom(filterChassisVPXByMaxWeightFrom *float64) {
	o.FilterChassisVPXByMaxWeightFrom = filterChassisVPXByMaxWeightFrom
}

// WithFilterChassisVPXByMaxWidthFrom adds the filterChassisVPXByMaxWidthFrom to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) WithFilterChassisVPXByMaxWidthFrom(filterChassisVPXByMaxWidthFrom *float64) *GetAvailableChassisVPXParams {
	o.SetFilterChassisVPXByMaxWidthFrom(filterChassisVPXByMaxWidthFrom)
	return o
}

// SetFilterChassisVPXByMaxWidthFrom adds the filterChassisVPXByMaxWidthFrom to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) SetFilterChassisVPXByMaxWidthFrom(filterChassisVPXByMaxWidthFrom *float64) {
	o.FilterChassisVPXByMaxWidthFrom = filterChassisVPXByMaxWidthFrom
}

// WithFilterChassisVPXByMinHeightTo adds the filterChassisVPXByMinHeightTo to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) WithFilterChassisVPXByMinHeightTo(filterChassisVPXByMinHeightTo *float64) *GetAvailableChassisVPXParams {
	o.SetFilterChassisVPXByMinHeightTo(filterChassisVPXByMinHeightTo)
	return o
}

// SetFilterChassisVPXByMinHeightTo adds the filterChassisVPXByMinHeightTo to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) SetFilterChassisVPXByMinHeightTo(filterChassisVPXByMinHeightTo *float64) {
	o.FilterChassisVPXByMinHeightTo = filterChassisVPXByMinHeightTo
}

// WithFilterChassisVPXByMinLengthTo adds the filterChassisVPXByMinLengthTo to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) WithFilterChassisVPXByMinLengthTo(filterChassisVPXByMinLengthTo *float64) *GetAvailableChassisVPXParams {
	o.SetFilterChassisVPXByMinLengthTo(filterChassisVPXByMinLengthTo)
	return o
}

// SetFilterChassisVPXByMinLengthTo adds the filterChassisVPXByMinLengthTo to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) SetFilterChassisVPXByMinLengthTo(filterChassisVPXByMinLengthTo *float64) {
	o.FilterChassisVPXByMinLengthTo = filterChassisVPXByMinLengthTo
}

// WithFilterChassisVPXByMinPowerHandlingCapabilityPerBoardTo adds the filterChassisVPXByMinPowerHandlingCapabilityPerBoardTo to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) WithFilterChassisVPXByMinPowerHandlingCapabilityPerBoardTo(filterChassisVPXByMinPowerHandlingCapabilityPerBoardTo *float64) *GetAvailableChassisVPXParams {
	o.SetFilterChassisVPXByMinPowerHandlingCapabilityPerBoardTo(filterChassisVPXByMinPowerHandlingCapabilityPerBoardTo)
	return o
}

// SetFilterChassisVPXByMinPowerHandlingCapabilityPerBoardTo adds the filterChassisVPXByMinPowerHandlingCapabilityPerBoardTo to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) SetFilterChassisVPXByMinPowerHandlingCapabilityPerBoardTo(filterChassisVPXByMinPowerHandlingCapabilityPerBoardTo *float64) {
	o.FilterChassisVPXByMinPowerHandlingCapabilityPerBoardTo = filterChassisVPXByMinPowerHandlingCapabilityPerBoardTo
}

// WithFilterChassisVPXByMinTemperaturePerBoardTo adds the filterChassisVPXByMinTemperaturePerBoardTo to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) WithFilterChassisVPXByMinTemperaturePerBoardTo(filterChassisVPXByMinTemperaturePerBoardTo *float64) *GetAvailableChassisVPXParams {
	o.SetFilterChassisVPXByMinTemperaturePerBoardTo(filterChassisVPXByMinTemperaturePerBoardTo)
	return o
}

// SetFilterChassisVPXByMinTemperaturePerBoardTo adds the filterChassisVPXByMinTemperaturePerBoardTo to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) SetFilterChassisVPXByMinTemperaturePerBoardTo(filterChassisVPXByMinTemperaturePerBoardTo *float64) {
	o.FilterChassisVPXByMinTemperaturePerBoardTo = filterChassisVPXByMinTemperaturePerBoardTo
}

// WithFilterChassisVPXByMinWeightTo adds the filterChassisVPXByMinWeightTo to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) WithFilterChassisVPXByMinWeightTo(filterChassisVPXByMinWeightTo *float64) *GetAvailableChassisVPXParams {
	o.SetFilterChassisVPXByMinWeightTo(filterChassisVPXByMinWeightTo)
	return o
}

// SetFilterChassisVPXByMinWeightTo adds the filterChassisVPXByMinWeightTo to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) SetFilterChassisVPXByMinWeightTo(filterChassisVPXByMinWeightTo *float64) {
	o.FilterChassisVPXByMinWeightTo = filterChassisVPXByMinWeightTo
}

// WithFilterChassisVPXByMinWidthTo adds the filterChassisVPXByMinWidthTo to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) WithFilterChassisVPXByMinWidthTo(filterChassisVPXByMinWidthTo *float64) *GetAvailableChassisVPXParams {
	o.SetFilterChassisVPXByMinWidthTo(filterChassisVPXByMinWidthTo)
	return o
}

// SetFilterChassisVPXByMinWidthTo adds the filterChassisVPXByMinWidthTo to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) SetFilterChassisVPXByMinWidthTo(filterChassisVPXByMinWidthTo *float64) {
	o.FilterChassisVPXByMinWidthTo = filterChassisVPXByMinWidthTo
}

// WithLimit adds the limit to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) WithLimit(limit int64) *GetAvailableChassisVPXParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) SetLimit(limit int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) WithOffset(offset int64) *GetAvailableChassisVPXParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) SetOffset(offset int64) {
	o.Offset = offset
}

// WithSortField adds the sortField to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) WithSortField(sortField *string) *GetAvailableChassisVPXParams {
	o.SetSortField(sortField)
	return o
}

// SetSortField adds the sortField to the get available chassis v p x params
func (o *GetAvailableChassisVPXParams) SetSortField(sortField *string) {
	o.SortField = sortField
}

// WriteToRequest writes these params to a swagger request
func (o *GetAvailableChassisVPXParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FilterChassisVPXByMaxHeightFrom != nil {

		// query param FilterChassisVPXByMaxHeight[from]
		var qrFilterChassisVPXByMaxHeightFrom float64

		if o.FilterChassisVPXByMaxHeightFrom != nil {
			qrFilterChassisVPXByMaxHeightFrom = *o.FilterChassisVPXByMaxHeightFrom
		}
		qFilterChassisVPXByMaxHeightFrom := swag.FormatFloat64(qrFilterChassisVPXByMaxHeightFrom)
		if qFilterChassisVPXByMaxHeightFrom != "" {

			if err := r.SetQueryParam("FilterChassisVPXByMaxHeight[from]", qFilterChassisVPXByMaxHeightFrom); err != nil {
				return err
			}
		}
	}

	if o.FilterChassisVPXByMaxLengthFrom != nil {

		// query param FilterChassisVPXByMaxLength[from]
		var qrFilterChassisVPXByMaxLengthFrom float64

		if o.FilterChassisVPXByMaxLengthFrom != nil {
			qrFilterChassisVPXByMaxLengthFrom = *o.FilterChassisVPXByMaxLengthFrom
		}
		qFilterChassisVPXByMaxLengthFrom := swag.FormatFloat64(qrFilterChassisVPXByMaxLengthFrom)
		if qFilterChassisVPXByMaxLengthFrom != "" {

			if err := r.SetQueryParam("FilterChassisVPXByMaxLength[from]", qFilterChassisVPXByMaxLengthFrom); err != nil {
				return err
			}
		}
	}

	if o.FilterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom != nil {

		// query param FilterChassisVPXByMaxPowerHandlingCapabilityPerBoard[from]
		var qrFilterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom float64

		if o.FilterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom != nil {
			qrFilterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom = *o.FilterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom
		}
		qFilterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom := swag.FormatFloat64(qrFilterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom)
		if qFilterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom != "" {

			if err := r.SetQueryParam("FilterChassisVPXByMaxPowerHandlingCapabilityPerBoard[from]", qFilterChassisVPXByMaxPowerHandlingCapabilityPerBoardFrom); err != nil {
				return err
			}
		}
	}

	if o.FilterChassisVPXByMaxTemperaturePerBoardFrom != nil {

		// query param FilterChassisVPXByMaxTemperaturePerBoard[from]
		var qrFilterChassisVPXByMaxTemperaturePerBoardFrom float64

		if o.FilterChassisVPXByMaxTemperaturePerBoardFrom != nil {
			qrFilterChassisVPXByMaxTemperaturePerBoardFrom = *o.FilterChassisVPXByMaxTemperaturePerBoardFrom
		}
		qFilterChassisVPXByMaxTemperaturePerBoardFrom := swag.FormatFloat64(qrFilterChassisVPXByMaxTemperaturePerBoardFrom)
		if qFilterChassisVPXByMaxTemperaturePerBoardFrom != "" {

			if err := r.SetQueryParam("FilterChassisVPXByMaxTemperaturePerBoard[from]", qFilterChassisVPXByMaxTemperaturePerBoardFrom); err != nil {
				return err
			}
		}
	}

	if o.FilterChassisVPXByMaxWeightFrom != nil {

		// query param FilterChassisVPXByMaxWeight[from]
		var qrFilterChassisVPXByMaxWeightFrom float64

		if o.FilterChassisVPXByMaxWeightFrom != nil {
			qrFilterChassisVPXByMaxWeightFrom = *o.FilterChassisVPXByMaxWeightFrom
		}
		qFilterChassisVPXByMaxWeightFrom := swag.FormatFloat64(qrFilterChassisVPXByMaxWeightFrom)
		if qFilterChassisVPXByMaxWeightFrom != "" {

			if err := r.SetQueryParam("FilterChassisVPXByMaxWeight[from]", qFilterChassisVPXByMaxWeightFrom); err != nil {
				return err
			}
		}
	}

	if o.FilterChassisVPXByMaxWidthFrom != nil {

		// query param FilterChassisVPXByMaxWidth[from]
		var qrFilterChassisVPXByMaxWidthFrom float64

		if o.FilterChassisVPXByMaxWidthFrom != nil {
			qrFilterChassisVPXByMaxWidthFrom = *o.FilterChassisVPXByMaxWidthFrom
		}
		qFilterChassisVPXByMaxWidthFrom := swag.FormatFloat64(qrFilterChassisVPXByMaxWidthFrom)
		if qFilterChassisVPXByMaxWidthFrom != "" {

			if err := r.SetQueryParam("FilterChassisVPXByMaxWidth[from]", qFilterChassisVPXByMaxWidthFrom); err != nil {
				return err
			}
		}
	}

	if o.FilterChassisVPXByMinHeightTo != nil {

		// query param FilterChassisVPXByMinHeight[to]
		var qrFilterChassisVPXByMinHeightTo float64

		if o.FilterChassisVPXByMinHeightTo != nil {
			qrFilterChassisVPXByMinHeightTo = *o.FilterChassisVPXByMinHeightTo
		}
		qFilterChassisVPXByMinHeightTo := swag.FormatFloat64(qrFilterChassisVPXByMinHeightTo)
		if qFilterChassisVPXByMinHeightTo != "" {

			if err := r.SetQueryParam("FilterChassisVPXByMinHeight[to]", qFilterChassisVPXByMinHeightTo); err != nil {
				return err
			}
		}
	}

	if o.FilterChassisVPXByMinLengthTo != nil {

		// query param FilterChassisVPXByMinLength[to]
		var qrFilterChassisVPXByMinLengthTo float64

		if o.FilterChassisVPXByMinLengthTo != nil {
			qrFilterChassisVPXByMinLengthTo = *o.FilterChassisVPXByMinLengthTo
		}
		qFilterChassisVPXByMinLengthTo := swag.FormatFloat64(qrFilterChassisVPXByMinLengthTo)
		if qFilterChassisVPXByMinLengthTo != "" {

			if err := r.SetQueryParam("FilterChassisVPXByMinLength[to]", qFilterChassisVPXByMinLengthTo); err != nil {
				return err
			}
		}
	}

	if o.FilterChassisVPXByMinPowerHandlingCapabilityPerBoardTo != nil {

		// query param FilterChassisVPXByMinPowerHandlingCapabilityPerBoard[to]
		var qrFilterChassisVPXByMinPowerHandlingCapabilityPerBoardTo float64

		if o.FilterChassisVPXByMinPowerHandlingCapabilityPerBoardTo != nil {
			qrFilterChassisVPXByMinPowerHandlingCapabilityPerBoardTo = *o.FilterChassisVPXByMinPowerHandlingCapabilityPerBoardTo
		}
		qFilterChassisVPXByMinPowerHandlingCapabilityPerBoardTo := swag.FormatFloat64(qrFilterChassisVPXByMinPowerHandlingCapabilityPerBoardTo)
		if qFilterChassisVPXByMinPowerHandlingCapabilityPerBoardTo != "" {

			if err := r.SetQueryParam("FilterChassisVPXByMinPowerHandlingCapabilityPerBoard[to]", qFilterChassisVPXByMinPowerHandlingCapabilityPerBoardTo); err != nil {
				return err
			}
		}
	}

	if o.FilterChassisVPXByMinTemperaturePerBoardTo != nil {

		// query param FilterChassisVPXByMinTemperaturePerBoard[to]
		var qrFilterChassisVPXByMinTemperaturePerBoardTo float64

		if o.FilterChassisVPXByMinTemperaturePerBoardTo != nil {
			qrFilterChassisVPXByMinTemperaturePerBoardTo = *o.FilterChassisVPXByMinTemperaturePerBoardTo
		}
		qFilterChassisVPXByMinTemperaturePerBoardTo := swag.FormatFloat64(qrFilterChassisVPXByMinTemperaturePerBoardTo)
		if qFilterChassisVPXByMinTemperaturePerBoardTo != "" {

			if err := r.SetQueryParam("FilterChassisVPXByMinTemperaturePerBoard[to]", qFilterChassisVPXByMinTemperaturePerBoardTo); err != nil {
				return err
			}
		}
	}

	if o.FilterChassisVPXByMinWeightTo != nil {

		// query param FilterChassisVPXByMinWeight[to]
		var qrFilterChassisVPXByMinWeightTo float64

		if o.FilterChassisVPXByMinWeightTo != nil {
			qrFilterChassisVPXByMinWeightTo = *o.FilterChassisVPXByMinWeightTo
		}
		qFilterChassisVPXByMinWeightTo := swag.FormatFloat64(qrFilterChassisVPXByMinWeightTo)
		if qFilterChassisVPXByMinWeightTo != "" {

			if err := r.SetQueryParam("FilterChassisVPXByMinWeight[to]", qFilterChassisVPXByMinWeightTo); err != nil {
				return err
			}
		}
	}

	if o.FilterChassisVPXByMinWidthTo != nil {

		// query param FilterChassisVPXByMinWidth[to]
		var qrFilterChassisVPXByMinWidthTo float64

		if o.FilterChassisVPXByMinWidthTo != nil {
			qrFilterChassisVPXByMinWidthTo = *o.FilterChassisVPXByMinWidthTo
		}
		qFilterChassisVPXByMinWidthTo := swag.FormatFloat64(qrFilterChassisVPXByMinWidthTo)
		if qFilterChassisVPXByMinWidthTo != "" {

			if err := r.SetQueryParam("FilterChassisVPXByMinWidth[to]", qFilterChassisVPXByMinWidthTo); err != nil {
				return err
			}
		}
	}

	// query param limit
	qrLimit := o.Limit
	qLimit := swag.FormatInt64(qrLimit)
	if qLimit != "" {

		if err := r.SetQueryParam("limit", qLimit); err != nil {
			return err
		}
	}

	// query param offset
	qrOffset := o.Offset
	qOffset := swag.FormatInt64(qrOffset)
	if qOffset != "" {

		if err := r.SetQueryParam("offset", qOffset); err != nil {
			return err
		}
	}

	if o.SortField != nil {

		// query param sort[field]
		var qrSortField string

		if o.SortField != nil {
			qrSortField = *o.SortField
		}
		qSortField := qrSortField
		if qSortField != "" {

			if err := r.SetQueryParam("sort[field]", qSortField); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
