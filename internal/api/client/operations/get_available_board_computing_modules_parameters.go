// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAvailableBoardComputingModulesParams creates a new GetAvailableBoardComputingModulesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAvailableBoardComputingModulesParams() *GetAvailableBoardComputingModulesParams {
	return &GetAvailableBoardComputingModulesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAvailableBoardComputingModulesParamsWithTimeout creates a new GetAvailableBoardComputingModulesParams object
// with the ability to set a timeout on a request.
func NewGetAvailableBoardComputingModulesParamsWithTimeout(timeout time.Duration) *GetAvailableBoardComputingModulesParams {
	return &GetAvailableBoardComputingModulesParams{
		timeout: timeout,
	}
}

// NewGetAvailableBoardComputingModulesParamsWithContext creates a new GetAvailableBoardComputingModulesParams object
// with the ability to set a context for a request.
func NewGetAvailableBoardComputingModulesParamsWithContext(ctx context.Context) *GetAvailableBoardComputingModulesParams {
	return &GetAvailableBoardComputingModulesParams{
		Context: ctx,
	}
}

// NewGetAvailableBoardComputingModulesParamsWithHTTPClient creates a new GetAvailableBoardComputingModulesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAvailableBoardComputingModulesParamsWithHTTPClient(client *http.Client) *GetAvailableBoardComputingModulesParams {
	return &GetAvailableBoardComputingModulesParams{
		HTTPClient: client,
	}
}

/*
GetAvailableBoardComputingModulesParams contains all the parameters to send to the API endpoint

	for the get available board computing modules operation.

	Typically these are written to a http.Request.
*/
type GetAvailableBoardComputingModulesParams struct {

	/* FilterBoardComputingModuleByLengthMax.

	   Maximum length to filter by
	*/
	FilterBoardComputingModuleByLengthMax *float64

	/* FilterBoardComputingModuleByLengthMin.

	   Minimum length to filter by
	*/
	FilterBoardComputingModuleByLengthMin *float64

	/* FilterBoardComputingModuleByName.

	   Filter Board Computing Module By Name
	*/
	FilterBoardComputingModuleByName *string

	/* Limit.

	   Limit for pagination
	*/
	Limit int64

	/* Offset.

	   Offset for pagination
	*/
	Offset int64

	/* SortDirection.

	   Sort direction
	*/
	SortDirection *string

	/* SortField.

	   Field to sort by
	*/
	SortField *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get available board computing modules params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAvailableBoardComputingModulesParams) WithDefaults() *GetAvailableBoardComputingModulesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get available board computing modules params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAvailableBoardComputingModulesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get available board computing modules params
func (o *GetAvailableBoardComputingModulesParams) WithTimeout(timeout time.Duration) *GetAvailableBoardComputingModulesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get available board computing modules params
func (o *GetAvailableBoardComputingModulesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get available board computing modules params
func (o *GetAvailableBoardComputingModulesParams) WithContext(ctx context.Context) *GetAvailableBoardComputingModulesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get available board computing modules params
func (o *GetAvailableBoardComputingModulesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get available board computing modules params
func (o *GetAvailableBoardComputingModulesParams) WithHTTPClient(client *http.Client) *GetAvailableBoardComputingModulesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get available board computing modules params
func (o *GetAvailableBoardComputingModulesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilterBoardComputingModuleByLengthMax adds the filterBoardComputingModuleByLengthMax to the get available board computing modules params
func (o *GetAvailableBoardComputingModulesParams) WithFilterBoardComputingModuleByLengthMax(filterBoardComputingModuleByLengthMax *float64) *GetAvailableBoardComputingModulesParams {
	o.SetFilterBoardComputingModuleByLengthMax(filterBoardComputingModuleByLengthMax)
	return o
}

// SetFilterBoardComputingModuleByLengthMax adds the filterBoardComputingModuleByLengthMax to the get available board computing modules params
func (o *GetAvailableBoardComputingModulesParams) SetFilterBoardComputingModuleByLengthMax(filterBoardComputingModuleByLengthMax *float64) {
	o.FilterBoardComputingModuleByLengthMax = filterBoardComputingModuleByLengthMax
}

// WithFilterBoardComputingModuleByLengthMin adds the filterBoardComputingModuleByLengthMin to the get available board computing modules params
func (o *GetAvailableBoardComputingModulesParams) WithFilterBoardComputingModuleByLengthMin(filterBoardComputingModuleByLengthMin *float64) *GetAvailableBoardComputingModulesParams {
	o.SetFilterBoardComputingModuleByLengthMin(filterBoardComputingModuleByLengthMin)
	return o
}

// SetFilterBoardComputingModuleByLengthMin adds the filterBoardComputingModuleByLengthMin to the get available board computing modules params
func (o *GetAvailableBoardComputingModulesParams) SetFilterBoardComputingModuleByLengthMin(filterBoardComputingModuleByLengthMin *float64) {
	o.FilterBoardComputingModuleByLengthMin = filterBoardComputingModuleByLengthMin
}

// WithFilterBoardComputingModuleByName adds the filterBoardComputingModuleByName to the get available board computing modules params
func (o *GetAvailableBoardComputingModulesParams) WithFilterBoardComputingModuleByName(filterBoardComputingModuleByName *string) *GetAvailableBoardComputingModulesParams {
	o.SetFilterBoardComputingModuleByName(filterBoardComputingModuleByName)
	return o
}

// SetFilterBoardComputingModuleByName adds the filterBoardComputingModuleByName to the get available board computing modules params
func (o *GetAvailableBoardComputingModulesParams) SetFilterBoardComputingModuleByName(filterBoardComputingModuleByName *string) {
	o.FilterBoardComputingModuleByName = filterBoardComputingModuleByName
}

// WithLimit adds the limit to the get available board computing modules params
func (o *GetAvailableBoardComputingModulesParams) WithLimit(limit int64) *GetAvailableBoardComputingModulesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get available board computing modules params
func (o *GetAvailableBoardComputingModulesParams) SetLimit(limit int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get available board computing modules params
func (o *GetAvailableBoardComputingModulesParams) WithOffset(offset int64) *GetAvailableBoardComputingModulesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get available board computing modules params
func (o *GetAvailableBoardComputingModulesParams) SetOffset(offset int64) {
	o.Offset = offset
}

// WithSortDirection adds the sortDirection to the get available board computing modules params
func (o *GetAvailableBoardComputingModulesParams) WithSortDirection(sortDirection *string) *GetAvailableBoardComputingModulesParams {
	o.SetSortDirection(sortDirection)
	return o
}

// SetSortDirection adds the sortDirection to the get available board computing modules params
func (o *GetAvailableBoardComputingModulesParams) SetSortDirection(sortDirection *string) {
	o.SortDirection = sortDirection
}

// WithSortField adds the sortField to the get available board computing modules params
func (o *GetAvailableBoardComputingModulesParams) WithSortField(sortField *string) *GetAvailableBoardComputingModulesParams {
	o.SetSortField(sortField)
	return o
}

// SetSortField adds the sortField to the get available board computing modules params
func (o *GetAvailableBoardComputingModulesParams) SetSortField(sortField *string) {
	o.SortField = sortField
}

// WriteToRequest writes these params to a swagger request
func (o *GetAvailableBoardComputingModulesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FilterBoardComputingModuleByLengthMax != nil {

		// query param FilterBoardComputingModuleByLength[max]
		var qrFilterBoardComputingModuleByLengthMax float64

		if o.FilterBoardComputingModuleByLengthMax != nil {
			qrFilterBoardComputingModuleByLengthMax = *o.FilterBoardComputingModuleByLengthMax
		}
		qFilterBoardComputingModuleByLengthMax := swag.FormatFloat64(qrFilterBoardComputingModuleByLengthMax)
		if qFilterBoardComputingModuleByLengthMax != "" {

			if err := r.SetQueryParam("FilterBoardComputingModuleByLength[max]", qFilterBoardComputingModuleByLengthMax); err != nil {
				return err
			}
		}
	}

	if o.FilterBoardComputingModuleByLengthMin != nil {

		// query param FilterBoardComputingModuleByLength[min]
		var qrFilterBoardComputingModuleByLengthMin float64

		if o.FilterBoardComputingModuleByLengthMin != nil {
			qrFilterBoardComputingModuleByLengthMin = *o.FilterBoardComputingModuleByLengthMin
		}
		qFilterBoardComputingModuleByLengthMin := swag.FormatFloat64(qrFilterBoardComputingModuleByLengthMin)
		if qFilterBoardComputingModuleByLengthMin != "" {

			if err := r.SetQueryParam("FilterBoardComputingModuleByLength[min]", qFilterBoardComputingModuleByLengthMin); err != nil {
				return err
			}
		}
	}

	if o.FilterBoardComputingModuleByName != nil {

		// query param FilterBoardComputingModuleByName
		var qrFilterBoardComputingModuleByName string

		if o.FilterBoardComputingModuleByName != nil {
			qrFilterBoardComputingModuleByName = *o.FilterBoardComputingModuleByName
		}
		qFilterBoardComputingModuleByName := qrFilterBoardComputingModuleByName
		if qFilterBoardComputingModuleByName != "" {

			if err := r.SetQueryParam("FilterBoardComputingModuleByName", qFilterBoardComputingModuleByName); err != nil {
				return err
			}
		}
	}

	// query param limit
	qrLimit := o.Limit
	qLimit := swag.FormatInt64(qrLimit)
	if qLimit != "" {

		if err := r.SetQueryParam("limit", qLimit); err != nil {
			return err
		}
	}

	// query param offset
	qrOffset := o.Offset
	qOffset := swag.FormatInt64(qrOffset)
	if qOffset != "" {

		if err := r.SetQueryParam("offset", qOffset); err != nil {
			return err
		}
	}

	if o.SortDirection != nil {

		// query param sort[direction]
		var qrSortDirection string

		if o.SortDirection != nil {
			qrSortDirection = *o.SortDirection
		}
		qSortDirection := qrSortDirection
		if qSortDirection != "" {

			if err := r.SetQueryParam("sort[direction]", qSortDirection); err != nil {
				return err
			}
		}
	}

	if o.SortField != nil {

		// query param sort[field]
		var qrSortField string

		if o.SortField != nil {
			qrSortField = *o.SortField
		}
		qSortField := qrSortField
		if qSortField != "" {

			if err := r.SetQueryParam("sort[field]", qSortField); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
