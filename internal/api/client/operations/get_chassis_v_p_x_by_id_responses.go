// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	models "github.com/Maksim646/space_vpx_satellite/internal/api/definition"
)

// GetChassisVPXByIDReader is a Reader for the GetChassisVPXByID structure.
type GetChassisVPXByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetChassisVPXByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetChassisVPXByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetChassisVPXByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetChassisVPXByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetChassisVPXByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /chassis_vpx/{id}] GetChassisVPXByID", response, response.Code())
	}
}

// NewGetChassisVPXByIDOK creates a GetChassisVPXByIDOK with default headers values
func NewGetChassisVPXByIDOK() *GetChassisVPXByIDOK {
	return &GetChassisVPXByIDOK{}
}

/*
GetChassisVPXByIDOK describes a response with status code 200, with default header values.

Chassis VPX Response
*/
type GetChassisVPXByIDOK struct {
	Payload *models.ChassisVPX
}

// IsSuccess returns true when this get chassis v p x by Id o k response has a 2xx status code
func (o *GetChassisVPXByIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get chassis v p x by Id o k response has a 3xx status code
func (o *GetChassisVPXByIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get chassis v p x by Id o k response has a 4xx status code
func (o *GetChassisVPXByIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get chassis v p x by Id o k response has a 5xx status code
func (o *GetChassisVPXByIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get chassis v p x by Id o k response a status code equal to that given
func (o *GetChassisVPXByIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get chassis v p x by Id o k response
func (o *GetChassisVPXByIDOK) Code() int {
	return 200
}

func (o *GetChassisVPXByIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chassis_vpx/{id}][%d] getChassisVPXByIdOK %s", 200, payload)
}

func (o *GetChassisVPXByIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chassis_vpx/{id}][%d] getChassisVPXByIdOK %s", 200, payload)
}

func (o *GetChassisVPXByIDOK) GetPayload() *models.ChassisVPX {
	return o.Payload
}

func (o *GetChassisVPXByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ChassisVPX)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetChassisVPXByIDForbidden creates a GetChassisVPXByIDForbidden with default headers values
func NewGetChassisVPXByIDForbidden() *GetChassisVPXByIDForbidden {
	return &GetChassisVPXByIDForbidden{}
}

/*
GetChassisVPXByIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetChassisVPXByIDForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get chassis v p x by Id forbidden response has a 2xx status code
func (o *GetChassisVPXByIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get chassis v p x by Id forbidden response has a 3xx status code
func (o *GetChassisVPXByIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get chassis v p x by Id forbidden response has a 4xx status code
func (o *GetChassisVPXByIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get chassis v p x by Id forbidden response has a 5xx status code
func (o *GetChassisVPXByIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get chassis v p x by Id forbidden response a status code equal to that given
func (o *GetChassisVPXByIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get chassis v p x by Id forbidden response
func (o *GetChassisVPXByIDForbidden) Code() int {
	return 403
}

func (o *GetChassisVPXByIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chassis_vpx/{id}][%d] getChassisVPXByIdForbidden %s", 403, payload)
}

func (o *GetChassisVPXByIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chassis_vpx/{id}][%d] getChassisVPXByIdForbidden %s", 403, payload)
}

func (o *GetChassisVPXByIDForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetChassisVPXByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetChassisVPXByIDNotFound creates a GetChassisVPXByIDNotFound with default headers values
func NewGetChassisVPXByIDNotFound() *GetChassisVPXByIDNotFound {
	return &GetChassisVPXByIDNotFound{}
}

/*
GetChassisVPXByIDNotFound describes a response with status code 404, with default header values.

Chassis VPX not found
*/
type GetChassisVPXByIDNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get chassis v p x by Id not found response has a 2xx status code
func (o *GetChassisVPXByIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get chassis v p x by Id not found response has a 3xx status code
func (o *GetChassisVPXByIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get chassis v p x by Id not found response has a 4xx status code
func (o *GetChassisVPXByIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get chassis v p x by Id not found response has a 5xx status code
func (o *GetChassisVPXByIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get chassis v p x by Id not found response a status code equal to that given
func (o *GetChassisVPXByIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get chassis v p x by Id not found response
func (o *GetChassisVPXByIDNotFound) Code() int {
	return 404
}

func (o *GetChassisVPXByIDNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chassis_vpx/{id}][%d] getChassisVPXByIdNotFound %s", 404, payload)
}

func (o *GetChassisVPXByIDNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chassis_vpx/{id}][%d] getChassisVPXByIdNotFound %s", 404, payload)
}

func (o *GetChassisVPXByIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetChassisVPXByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetChassisVPXByIDInternalServerError creates a GetChassisVPXByIDInternalServerError with default headers values
func NewGetChassisVPXByIDInternalServerError() *GetChassisVPXByIDInternalServerError {
	return &GetChassisVPXByIDInternalServerError{}
}

/*
GetChassisVPXByIDInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetChassisVPXByIDInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get chassis v p x by Id internal server error response has a 2xx status code
func (o *GetChassisVPXByIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get chassis v p x by Id internal server error response has a 3xx status code
func (o *GetChassisVPXByIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get chassis v p x by Id internal server error response has a 4xx status code
func (o *GetChassisVPXByIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get chassis v p x by Id internal server error response has a 5xx status code
func (o *GetChassisVPXByIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get chassis v p x by Id internal server error response a status code equal to that given
func (o *GetChassisVPXByIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get chassis v p x by Id internal server error response
func (o *GetChassisVPXByIDInternalServerError) Code() int {
	return 500
}

func (o *GetChassisVPXByIDInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chassis_vpx/{id}][%d] getChassisVPXByIdInternalServerError %s", 500, payload)
}

func (o *GetChassisVPXByIDInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chassis_vpx/{id}][%d] getChassisVPXByIdInternalServerError %s", 500, payload)
}

func (o *GetChassisVPXByIDInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetChassisVPXByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
