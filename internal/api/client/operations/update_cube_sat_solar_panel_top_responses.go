// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	models "github.com/Maksim646/space_vpx_satellite/internal/api/definition"
)

// UpdateCubeSatSolarPanelTopReader is a Reader for the UpdateCubeSatSolarPanelTop structure.
type UpdateCubeSatSolarPanelTopReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCubeSatSolarPanelTopReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateCubeSatSolarPanelTopOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateCubeSatSolarPanelTopBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateCubeSatSolarPanelTopForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateCubeSatSolarPanelTopUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateCubeSatSolarPanelTopInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /solar_panel_top/{id}] UpdateCubeSatSolarPanelTop", response, response.Code())
	}
}

// NewUpdateCubeSatSolarPanelTopOK creates a UpdateCubeSatSolarPanelTopOK with default headers values
func NewUpdateCubeSatSolarPanelTopOK() *UpdateCubeSatSolarPanelTopOK {
	return &UpdateCubeSatSolarPanelTopOK{}
}

/*
UpdateCubeSatSolarPanelTopOK describes a response with status code 200, with default header values.

Update Solar Panel Top Response
*/
type UpdateCubeSatSolarPanelTopOK struct {
	Payload *models.SolarPanelTop
}

// IsSuccess returns true when this update cube sat solar panel top o k response has a 2xx status code
func (o *UpdateCubeSatSolarPanelTopOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update cube sat solar panel top o k response has a 3xx status code
func (o *UpdateCubeSatSolarPanelTopOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cube sat solar panel top o k response has a 4xx status code
func (o *UpdateCubeSatSolarPanelTopOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update cube sat solar panel top o k response has a 5xx status code
func (o *UpdateCubeSatSolarPanelTopOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update cube sat solar panel top o k response a status code equal to that given
func (o *UpdateCubeSatSolarPanelTopOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update cube sat solar panel top o k response
func (o *UpdateCubeSatSolarPanelTopOK) Code() int {
	return 200
}

func (o *UpdateCubeSatSolarPanelTopOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /solar_panel_top/{id}][%d] updateCubeSatSolarPanelTopOK %s", 200, payload)
}

func (o *UpdateCubeSatSolarPanelTopOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /solar_panel_top/{id}][%d] updateCubeSatSolarPanelTopOK %s", 200, payload)
}

func (o *UpdateCubeSatSolarPanelTopOK) GetPayload() *models.SolarPanelTop {
	return o.Payload
}

func (o *UpdateCubeSatSolarPanelTopOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SolarPanelTop)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCubeSatSolarPanelTopBadRequest creates a UpdateCubeSatSolarPanelTopBadRequest with default headers values
func NewUpdateCubeSatSolarPanelTopBadRequest() *UpdateCubeSatSolarPanelTopBadRequest {
	return &UpdateCubeSatSolarPanelTopBadRequest{}
}

/*
UpdateCubeSatSolarPanelTopBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateCubeSatSolarPanelTopBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update cube sat solar panel top bad request response has a 2xx status code
func (o *UpdateCubeSatSolarPanelTopBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update cube sat solar panel top bad request response has a 3xx status code
func (o *UpdateCubeSatSolarPanelTopBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cube sat solar panel top bad request response has a 4xx status code
func (o *UpdateCubeSatSolarPanelTopBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update cube sat solar panel top bad request response has a 5xx status code
func (o *UpdateCubeSatSolarPanelTopBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update cube sat solar panel top bad request response a status code equal to that given
func (o *UpdateCubeSatSolarPanelTopBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update cube sat solar panel top bad request response
func (o *UpdateCubeSatSolarPanelTopBadRequest) Code() int {
	return 400
}

func (o *UpdateCubeSatSolarPanelTopBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /solar_panel_top/{id}][%d] updateCubeSatSolarPanelTopBadRequest %s", 400, payload)
}

func (o *UpdateCubeSatSolarPanelTopBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /solar_panel_top/{id}][%d] updateCubeSatSolarPanelTopBadRequest %s", 400, payload)
}

func (o *UpdateCubeSatSolarPanelTopBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateCubeSatSolarPanelTopBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCubeSatSolarPanelTopForbidden creates a UpdateCubeSatSolarPanelTopForbidden with default headers values
func NewUpdateCubeSatSolarPanelTopForbidden() *UpdateCubeSatSolarPanelTopForbidden {
	return &UpdateCubeSatSolarPanelTopForbidden{}
}

/*
UpdateCubeSatSolarPanelTopForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateCubeSatSolarPanelTopForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this update cube sat solar panel top forbidden response has a 2xx status code
func (o *UpdateCubeSatSolarPanelTopForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update cube sat solar panel top forbidden response has a 3xx status code
func (o *UpdateCubeSatSolarPanelTopForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cube sat solar panel top forbidden response has a 4xx status code
func (o *UpdateCubeSatSolarPanelTopForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update cube sat solar panel top forbidden response has a 5xx status code
func (o *UpdateCubeSatSolarPanelTopForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update cube sat solar panel top forbidden response a status code equal to that given
func (o *UpdateCubeSatSolarPanelTopForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update cube sat solar panel top forbidden response
func (o *UpdateCubeSatSolarPanelTopForbidden) Code() int {
	return 403
}

func (o *UpdateCubeSatSolarPanelTopForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /solar_panel_top/{id}][%d] updateCubeSatSolarPanelTopForbidden %s", 403, payload)
}

func (o *UpdateCubeSatSolarPanelTopForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /solar_panel_top/{id}][%d] updateCubeSatSolarPanelTopForbidden %s", 403, payload)
}

func (o *UpdateCubeSatSolarPanelTopForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateCubeSatSolarPanelTopForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCubeSatSolarPanelTopUnprocessableEntity creates a UpdateCubeSatSolarPanelTopUnprocessableEntity with default headers values
func NewUpdateCubeSatSolarPanelTopUnprocessableEntity() *UpdateCubeSatSolarPanelTopUnprocessableEntity {
	return &UpdateCubeSatSolarPanelTopUnprocessableEntity{}
}

/*
UpdateCubeSatSolarPanelTopUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type UpdateCubeSatSolarPanelTopUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this update cube sat solar panel top unprocessable entity response has a 2xx status code
func (o *UpdateCubeSatSolarPanelTopUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update cube sat solar panel top unprocessable entity response has a 3xx status code
func (o *UpdateCubeSatSolarPanelTopUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cube sat solar panel top unprocessable entity response has a 4xx status code
func (o *UpdateCubeSatSolarPanelTopUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update cube sat solar panel top unprocessable entity response has a 5xx status code
func (o *UpdateCubeSatSolarPanelTopUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update cube sat solar panel top unprocessable entity response a status code equal to that given
func (o *UpdateCubeSatSolarPanelTopUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update cube sat solar panel top unprocessable entity response
func (o *UpdateCubeSatSolarPanelTopUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateCubeSatSolarPanelTopUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /solar_panel_top/{id}][%d] updateCubeSatSolarPanelTopUnprocessableEntity %s", 422, payload)
}

func (o *UpdateCubeSatSolarPanelTopUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /solar_panel_top/{id}][%d] updateCubeSatSolarPanelTopUnprocessableEntity %s", 422, payload)
}

func (o *UpdateCubeSatSolarPanelTopUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateCubeSatSolarPanelTopUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCubeSatSolarPanelTopInternalServerError creates a UpdateCubeSatSolarPanelTopInternalServerError with default headers values
func NewUpdateCubeSatSolarPanelTopInternalServerError() *UpdateCubeSatSolarPanelTopInternalServerError {
	return &UpdateCubeSatSolarPanelTopInternalServerError{}
}

/*
UpdateCubeSatSolarPanelTopInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type UpdateCubeSatSolarPanelTopInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this update cube sat solar panel top internal server error response has a 2xx status code
func (o *UpdateCubeSatSolarPanelTopInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update cube sat solar panel top internal server error response has a 3xx status code
func (o *UpdateCubeSatSolarPanelTopInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cube sat solar panel top internal server error response has a 4xx status code
func (o *UpdateCubeSatSolarPanelTopInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update cube sat solar panel top internal server error response has a 5xx status code
func (o *UpdateCubeSatSolarPanelTopInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update cube sat solar panel top internal server error response a status code equal to that given
func (o *UpdateCubeSatSolarPanelTopInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update cube sat solar panel top internal server error response
func (o *UpdateCubeSatSolarPanelTopInternalServerError) Code() int {
	return 500
}

func (o *UpdateCubeSatSolarPanelTopInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /solar_panel_top/{id}][%d] updateCubeSatSolarPanelTopInternalServerError %s", 500, payload)
}

func (o *UpdateCubeSatSolarPanelTopInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /solar_panel_top/{id}][%d] updateCubeSatSolarPanelTopInternalServerError %s", 500, payload)
}

func (o *UpdateCubeSatSolarPanelTopInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateCubeSatSolarPanelTopInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
