// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	models "github.com/Maksim646/space_vpx_satellite/internal/api/definition"
)

// UpdateChassisVPXReader is a Reader for the UpdateChassisVPX structure.
type UpdateChassisVPXReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateChassisVPXReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateChassisVPXOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateChassisVPXBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateChassisVPXForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateChassisVPXUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateChassisVPXInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /chassis_vpx/{id}] UpdateChassisVPX", response, response.Code())
	}
}

// NewUpdateChassisVPXOK creates a UpdateChassisVPXOK with default headers values
func NewUpdateChassisVPXOK() *UpdateChassisVPXOK {
	return &UpdateChassisVPXOK{}
}

/*
UpdateChassisVPXOK describes a response with status code 200, with default header values.

Update Chassis VPX Response
*/
type UpdateChassisVPXOK struct {
	Payload *models.ChassisVPX
}

// IsSuccess returns true when this update chassis v p x o k response has a 2xx status code
func (o *UpdateChassisVPXOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update chassis v p x o k response has a 3xx status code
func (o *UpdateChassisVPXOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update chassis v p x o k response has a 4xx status code
func (o *UpdateChassisVPXOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update chassis v p x o k response has a 5xx status code
func (o *UpdateChassisVPXOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update chassis v p x o k response a status code equal to that given
func (o *UpdateChassisVPXOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update chassis v p x o k response
func (o *UpdateChassisVPXOK) Code() int {
	return 200
}

func (o *UpdateChassisVPXOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /chassis_vpx/{id}][%d] updateChassisVPXOK %s", 200, payload)
}

func (o *UpdateChassisVPXOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /chassis_vpx/{id}][%d] updateChassisVPXOK %s", 200, payload)
}

func (o *UpdateChassisVPXOK) GetPayload() *models.ChassisVPX {
	return o.Payload
}

func (o *UpdateChassisVPXOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ChassisVPX)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateChassisVPXBadRequest creates a UpdateChassisVPXBadRequest with default headers values
func NewUpdateChassisVPXBadRequest() *UpdateChassisVPXBadRequest {
	return &UpdateChassisVPXBadRequest{}
}

/*
UpdateChassisVPXBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateChassisVPXBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update chassis v p x bad request response has a 2xx status code
func (o *UpdateChassisVPXBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update chassis v p x bad request response has a 3xx status code
func (o *UpdateChassisVPXBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update chassis v p x bad request response has a 4xx status code
func (o *UpdateChassisVPXBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update chassis v p x bad request response has a 5xx status code
func (o *UpdateChassisVPXBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update chassis v p x bad request response a status code equal to that given
func (o *UpdateChassisVPXBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update chassis v p x bad request response
func (o *UpdateChassisVPXBadRequest) Code() int {
	return 400
}

func (o *UpdateChassisVPXBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /chassis_vpx/{id}][%d] updateChassisVPXBadRequest %s", 400, payload)
}

func (o *UpdateChassisVPXBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /chassis_vpx/{id}][%d] updateChassisVPXBadRequest %s", 400, payload)
}

func (o *UpdateChassisVPXBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateChassisVPXBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateChassisVPXForbidden creates a UpdateChassisVPXForbidden with default headers values
func NewUpdateChassisVPXForbidden() *UpdateChassisVPXForbidden {
	return &UpdateChassisVPXForbidden{}
}

/*
UpdateChassisVPXForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateChassisVPXForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this update chassis v p x forbidden response has a 2xx status code
func (o *UpdateChassisVPXForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update chassis v p x forbidden response has a 3xx status code
func (o *UpdateChassisVPXForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update chassis v p x forbidden response has a 4xx status code
func (o *UpdateChassisVPXForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update chassis v p x forbidden response has a 5xx status code
func (o *UpdateChassisVPXForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update chassis v p x forbidden response a status code equal to that given
func (o *UpdateChassisVPXForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update chassis v p x forbidden response
func (o *UpdateChassisVPXForbidden) Code() int {
	return 403
}

func (o *UpdateChassisVPXForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /chassis_vpx/{id}][%d] updateChassisVPXForbidden %s", 403, payload)
}

func (o *UpdateChassisVPXForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /chassis_vpx/{id}][%d] updateChassisVPXForbidden %s", 403, payload)
}

func (o *UpdateChassisVPXForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateChassisVPXForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateChassisVPXUnprocessableEntity creates a UpdateChassisVPXUnprocessableEntity with default headers values
func NewUpdateChassisVPXUnprocessableEntity() *UpdateChassisVPXUnprocessableEntity {
	return &UpdateChassisVPXUnprocessableEntity{}
}

/*
UpdateChassisVPXUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type UpdateChassisVPXUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this update chassis v p x unprocessable entity response has a 2xx status code
func (o *UpdateChassisVPXUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update chassis v p x unprocessable entity response has a 3xx status code
func (o *UpdateChassisVPXUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update chassis v p x unprocessable entity response has a 4xx status code
func (o *UpdateChassisVPXUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update chassis v p x unprocessable entity response has a 5xx status code
func (o *UpdateChassisVPXUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update chassis v p x unprocessable entity response a status code equal to that given
func (o *UpdateChassisVPXUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update chassis v p x unprocessable entity response
func (o *UpdateChassisVPXUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateChassisVPXUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /chassis_vpx/{id}][%d] updateChassisVPXUnprocessableEntity %s", 422, payload)
}

func (o *UpdateChassisVPXUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /chassis_vpx/{id}][%d] updateChassisVPXUnprocessableEntity %s", 422, payload)
}

func (o *UpdateChassisVPXUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateChassisVPXUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateChassisVPXInternalServerError creates a UpdateChassisVPXInternalServerError with default headers values
func NewUpdateChassisVPXInternalServerError() *UpdateChassisVPXInternalServerError {
	return &UpdateChassisVPXInternalServerError{}
}

/*
UpdateChassisVPXInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type UpdateChassisVPXInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this update chassis v p x internal server error response has a 2xx status code
func (o *UpdateChassisVPXInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update chassis v p x internal server error response has a 3xx status code
func (o *UpdateChassisVPXInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update chassis v p x internal server error response has a 4xx status code
func (o *UpdateChassisVPXInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update chassis v p x internal server error response has a 5xx status code
func (o *UpdateChassisVPXInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update chassis v p x internal server error response a status code equal to that given
func (o *UpdateChassisVPXInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update chassis v p x internal server error response
func (o *UpdateChassisVPXInternalServerError) Code() int {
	return 500
}

func (o *UpdateChassisVPXInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /chassis_vpx/{id}][%d] updateChassisVPXInternalServerError %s", 500, payload)
}

func (o *UpdateChassisVPXInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /chassis_vpx/{id}][%d] updateChassisVPXInternalServerError %s", 500, payload)
}

func (o *UpdateChassisVPXInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateChassisVPXInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
