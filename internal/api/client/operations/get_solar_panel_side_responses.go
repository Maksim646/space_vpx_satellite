// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	models "github.com/Maksim646/space_vpx_satellite/internal/api/definition"
)

// GetSolarPanelSideReader is a Reader for the GetSolarPanelSide structure.
type GetSolarPanelSideReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSolarPanelSideReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSolarPanelSideOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSolarPanelSideBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSolarPanelSideForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewGetSolarPanelSideUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSolarPanelSideInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /solar_panel_side/{id}] GetSolarPanelSide", response, response.Code())
	}
}

// NewGetSolarPanelSideOK creates a GetSolarPanelSideOK with default headers values
func NewGetSolarPanelSideOK() *GetSolarPanelSideOK {
	return &GetSolarPanelSideOK{}
}

/*
GetSolarPanelSideOK describes a response with status code 200, with default header values.

Get Solar Panel Side Response
*/
type GetSolarPanelSideOK struct {
	Payload *models.SolarPanelSide
}

// IsSuccess returns true when this get solar panel side o k response has a 2xx status code
func (o *GetSolarPanelSideOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get solar panel side o k response has a 3xx status code
func (o *GetSolarPanelSideOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get solar panel side o k response has a 4xx status code
func (o *GetSolarPanelSideOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get solar panel side o k response has a 5xx status code
func (o *GetSolarPanelSideOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get solar panel side o k response a status code equal to that given
func (o *GetSolarPanelSideOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get solar panel side o k response
func (o *GetSolarPanelSideOK) Code() int {
	return 200
}

func (o *GetSolarPanelSideOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /solar_panel_side/{id}][%d] getSolarPanelSideOK %s", 200, payload)
}

func (o *GetSolarPanelSideOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /solar_panel_side/{id}][%d] getSolarPanelSideOK %s", 200, payload)
}

func (o *GetSolarPanelSideOK) GetPayload() *models.SolarPanelSide {
	return o.Payload
}

func (o *GetSolarPanelSideOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SolarPanelSide)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSolarPanelSideBadRequest creates a GetSolarPanelSideBadRequest with default headers values
func NewGetSolarPanelSideBadRequest() *GetSolarPanelSideBadRequest {
	return &GetSolarPanelSideBadRequest{}
}

/*
GetSolarPanelSideBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetSolarPanelSideBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get solar panel side bad request response has a 2xx status code
func (o *GetSolarPanelSideBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get solar panel side bad request response has a 3xx status code
func (o *GetSolarPanelSideBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get solar panel side bad request response has a 4xx status code
func (o *GetSolarPanelSideBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get solar panel side bad request response has a 5xx status code
func (o *GetSolarPanelSideBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get solar panel side bad request response a status code equal to that given
func (o *GetSolarPanelSideBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get solar panel side bad request response
func (o *GetSolarPanelSideBadRequest) Code() int {
	return 400
}

func (o *GetSolarPanelSideBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /solar_panel_side/{id}][%d] getSolarPanelSideBadRequest %s", 400, payload)
}

func (o *GetSolarPanelSideBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /solar_panel_side/{id}][%d] getSolarPanelSideBadRequest %s", 400, payload)
}

func (o *GetSolarPanelSideBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetSolarPanelSideBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSolarPanelSideForbidden creates a GetSolarPanelSideForbidden with default headers values
func NewGetSolarPanelSideForbidden() *GetSolarPanelSideForbidden {
	return &GetSolarPanelSideForbidden{}
}

/*
GetSolarPanelSideForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetSolarPanelSideForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get solar panel side forbidden response has a 2xx status code
func (o *GetSolarPanelSideForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get solar panel side forbidden response has a 3xx status code
func (o *GetSolarPanelSideForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get solar panel side forbidden response has a 4xx status code
func (o *GetSolarPanelSideForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get solar panel side forbidden response has a 5xx status code
func (o *GetSolarPanelSideForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get solar panel side forbidden response a status code equal to that given
func (o *GetSolarPanelSideForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get solar panel side forbidden response
func (o *GetSolarPanelSideForbidden) Code() int {
	return 403
}

func (o *GetSolarPanelSideForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /solar_panel_side/{id}][%d] getSolarPanelSideForbidden %s", 403, payload)
}

func (o *GetSolarPanelSideForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /solar_panel_side/{id}][%d] getSolarPanelSideForbidden %s", 403, payload)
}

func (o *GetSolarPanelSideForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetSolarPanelSideForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSolarPanelSideUnprocessableEntity creates a GetSolarPanelSideUnprocessableEntity with default headers values
func NewGetSolarPanelSideUnprocessableEntity() *GetSolarPanelSideUnprocessableEntity {
	return &GetSolarPanelSideUnprocessableEntity{}
}

/*
GetSolarPanelSideUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type GetSolarPanelSideUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this get solar panel side unprocessable entity response has a 2xx status code
func (o *GetSolarPanelSideUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get solar panel side unprocessable entity response has a 3xx status code
func (o *GetSolarPanelSideUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get solar panel side unprocessable entity response has a 4xx status code
func (o *GetSolarPanelSideUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this get solar panel side unprocessable entity response has a 5xx status code
func (o *GetSolarPanelSideUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this get solar panel side unprocessable entity response a status code equal to that given
func (o *GetSolarPanelSideUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the get solar panel side unprocessable entity response
func (o *GetSolarPanelSideUnprocessableEntity) Code() int {
	return 422
}

func (o *GetSolarPanelSideUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /solar_panel_side/{id}][%d] getSolarPanelSideUnprocessableEntity %s", 422, payload)
}

func (o *GetSolarPanelSideUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /solar_panel_side/{id}][%d] getSolarPanelSideUnprocessableEntity %s", 422, payload)
}

func (o *GetSolarPanelSideUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetSolarPanelSideUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSolarPanelSideInternalServerError creates a GetSolarPanelSideInternalServerError with default headers values
func NewGetSolarPanelSideInternalServerError() *GetSolarPanelSideInternalServerError {
	return &GetSolarPanelSideInternalServerError{}
}

/*
GetSolarPanelSideInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetSolarPanelSideInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get solar panel side internal server error response has a 2xx status code
func (o *GetSolarPanelSideInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get solar panel side internal server error response has a 3xx status code
func (o *GetSolarPanelSideInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get solar panel side internal server error response has a 4xx status code
func (o *GetSolarPanelSideInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get solar panel side internal server error response has a 5xx status code
func (o *GetSolarPanelSideInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get solar panel side internal server error response a status code equal to that given
func (o *GetSolarPanelSideInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get solar panel side internal server error response
func (o *GetSolarPanelSideInternalServerError) Code() int {
	return 500
}

func (o *GetSolarPanelSideInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /solar_panel_side/{id}][%d] getSolarPanelSideInternalServerError %s", 500, payload)
}

func (o *GetSolarPanelSideInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /solar_panel_side/{id}][%d] getSolarPanelSideInternalServerError %s", 500, payload)
}

func (o *GetSolarPanelSideInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetSolarPanelSideInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
