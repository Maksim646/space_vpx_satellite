// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	models "github.com/Maksim646/space_vpx_satellite/internal/api/definition"
)

// UpdateCubeSatSolarPanelSideReader is a Reader for the UpdateCubeSatSolarPanelSide structure.
type UpdateCubeSatSolarPanelSideReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCubeSatSolarPanelSideReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateCubeSatSolarPanelSideOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateCubeSatSolarPanelSideBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateCubeSatSolarPanelSideForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateCubeSatSolarPanelSideUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateCubeSatSolarPanelSideInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /solar_panel_side/{id}] UpdateCubeSatSolarPanelSide", response, response.Code())
	}
}

// NewUpdateCubeSatSolarPanelSideOK creates a UpdateCubeSatSolarPanelSideOK with default headers values
func NewUpdateCubeSatSolarPanelSideOK() *UpdateCubeSatSolarPanelSideOK {
	return &UpdateCubeSatSolarPanelSideOK{}
}

/*
UpdateCubeSatSolarPanelSideOK describes a response with status code 200, with default header values.

Update Solar Panel Side Response
*/
type UpdateCubeSatSolarPanelSideOK struct {
	Payload *models.SolarPanelSide
}

// IsSuccess returns true when this update cube sat solar panel side o k response has a 2xx status code
func (o *UpdateCubeSatSolarPanelSideOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update cube sat solar panel side o k response has a 3xx status code
func (o *UpdateCubeSatSolarPanelSideOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cube sat solar panel side o k response has a 4xx status code
func (o *UpdateCubeSatSolarPanelSideOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update cube sat solar panel side o k response has a 5xx status code
func (o *UpdateCubeSatSolarPanelSideOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update cube sat solar panel side o k response a status code equal to that given
func (o *UpdateCubeSatSolarPanelSideOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update cube sat solar panel side o k response
func (o *UpdateCubeSatSolarPanelSideOK) Code() int {
	return 200
}

func (o *UpdateCubeSatSolarPanelSideOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /solar_panel_side/{id}][%d] updateCubeSatSolarPanelSideOK %s", 200, payload)
}

func (o *UpdateCubeSatSolarPanelSideOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /solar_panel_side/{id}][%d] updateCubeSatSolarPanelSideOK %s", 200, payload)
}

func (o *UpdateCubeSatSolarPanelSideOK) GetPayload() *models.SolarPanelSide {
	return o.Payload
}

func (o *UpdateCubeSatSolarPanelSideOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SolarPanelSide)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCubeSatSolarPanelSideBadRequest creates a UpdateCubeSatSolarPanelSideBadRequest with default headers values
func NewUpdateCubeSatSolarPanelSideBadRequest() *UpdateCubeSatSolarPanelSideBadRequest {
	return &UpdateCubeSatSolarPanelSideBadRequest{}
}

/*
UpdateCubeSatSolarPanelSideBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateCubeSatSolarPanelSideBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update cube sat solar panel side bad request response has a 2xx status code
func (o *UpdateCubeSatSolarPanelSideBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update cube sat solar panel side bad request response has a 3xx status code
func (o *UpdateCubeSatSolarPanelSideBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cube sat solar panel side bad request response has a 4xx status code
func (o *UpdateCubeSatSolarPanelSideBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update cube sat solar panel side bad request response has a 5xx status code
func (o *UpdateCubeSatSolarPanelSideBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update cube sat solar panel side bad request response a status code equal to that given
func (o *UpdateCubeSatSolarPanelSideBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update cube sat solar panel side bad request response
func (o *UpdateCubeSatSolarPanelSideBadRequest) Code() int {
	return 400
}

func (o *UpdateCubeSatSolarPanelSideBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /solar_panel_side/{id}][%d] updateCubeSatSolarPanelSideBadRequest %s", 400, payload)
}

func (o *UpdateCubeSatSolarPanelSideBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /solar_panel_side/{id}][%d] updateCubeSatSolarPanelSideBadRequest %s", 400, payload)
}

func (o *UpdateCubeSatSolarPanelSideBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateCubeSatSolarPanelSideBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCubeSatSolarPanelSideForbidden creates a UpdateCubeSatSolarPanelSideForbidden with default headers values
func NewUpdateCubeSatSolarPanelSideForbidden() *UpdateCubeSatSolarPanelSideForbidden {
	return &UpdateCubeSatSolarPanelSideForbidden{}
}

/*
UpdateCubeSatSolarPanelSideForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateCubeSatSolarPanelSideForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this update cube sat solar panel side forbidden response has a 2xx status code
func (o *UpdateCubeSatSolarPanelSideForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update cube sat solar panel side forbidden response has a 3xx status code
func (o *UpdateCubeSatSolarPanelSideForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cube sat solar panel side forbidden response has a 4xx status code
func (o *UpdateCubeSatSolarPanelSideForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update cube sat solar panel side forbidden response has a 5xx status code
func (o *UpdateCubeSatSolarPanelSideForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update cube sat solar panel side forbidden response a status code equal to that given
func (o *UpdateCubeSatSolarPanelSideForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update cube sat solar panel side forbidden response
func (o *UpdateCubeSatSolarPanelSideForbidden) Code() int {
	return 403
}

func (o *UpdateCubeSatSolarPanelSideForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /solar_panel_side/{id}][%d] updateCubeSatSolarPanelSideForbidden %s", 403, payload)
}

func (o *UpdateCubeSatSolarPanelSideForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /solar_panel_side/{id}][%d] updateCubeSatSolarPanelSideForbidden %s", 403, payload)
}

func (o *UpdateCubeSatSolarPanelSideForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateCubeSatSolarPanelSideForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCubeSatSolarPanelSideUnprocessableEntity creates a UpdateCubeSatSolarPanelSideUnprocessableEntity with default headers values
func NewUpdateCubeSatSolarPanelSideUnprocessableEntity() *UpdateCubeSatSolarPanelSideUnprocessableEntity {
	return &UpdateCubeSatSolarPanelSideUnprocessableEntity{}
}

/*
UpdateCubeSatSolarPanelSideUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type UpdateCubeSatSolarPanelSideUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this update cube sat solar panel side unprocessable entity response has a 2xx status code
func (o *UpdateCubeSatSolarPanelSideUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update cube sat solar panel side unprocessable entity response has a 3xx status code
func (o *UpdateCubeSatSolarPanelSideUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cube sat solar panel side unprocessable entity response has a 4xx status code
func (o *UpdateCubeSatSolarPanelSideUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update cube sat solar panel side unprocessable entity response has a 5xx status code
func (o *UpdateCubeSatSolarPanelSideUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update cube sat solar panel side unprocessable entity response a status code equal to that given
func (o *UpdateCubeSatSolarPanelSideUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update cube sat solar panel side unprocessable entity response
func (o *UpdateCubeSatSolarPanelSideUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateCubeSatSolarPanelSideUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /solar_panel_side/{id}][%d] updateCubeSatSolarPanelSideUnprocessableEntity %s", 422, payload)
}

func (o *UpdateCubeSatSolarPanelSideUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /solar_panel_side/{id}][%d] updateCubeSatSolarPanelSideUnprocessableEntity %s", 422, payload)
}

func (o *UpdateCubeSatSolarPanelSideUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateCubeSatSolarPanelSideUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCubeSatSolarPanelSideInternalServerError creates a UpdateCubeSatSolarPanelSideInternalServerError with default headers values
func NewUpdateCubeSatSolarPanelSideInternalServerError() *UpdateCubeSatSolarPanelSideInternalServerError {
	return &UpdateCubeSatSolarPanelSideInternalServerError{}
}

/*
UpdateCubeSatSolarPanelSideInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type UpdateCubeSatSolarPanelSideInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this update cube sat solar panel side internal server error response has a 2xx status code
func (o *UpdateCubeSatSolarPanelSideInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update cube sat solar panel side internal server error response has a 3xx status code
func (o *UpdateCubeSatSolarPanelSideInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cube sat solar panel side internal server error response has a 4xx status code
func (o *UpdateCubeSatSolarPanelSideInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update cube sat solar panel side internal server error response has a 5xx status code
func (o *UpdateCubeSatSolarPanelSideInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update cube sat solar panel side internal server error response a status code equal to that given
func (o *UpdateCubeSatSolarPanelSideInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update cube sat solar panel side internal server error response
func (o *UpdateCubeSatSolarPanelSideInternalServerError) Code() int {
	return 500
}

func (o *UpdateCubeSatSolarPanelSideInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /solar_panel_side/{id}][%d] updateCubeSatSolarPanelSideInternalServerError %s", 500, payload)
}

func (o *UpdateCubeSatSolarPanelSideInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /solar_panel_side/{id}][%d] updateCubeSatSolarPanelSideInternalServerError %s", 500, payload)
}

func (o *UpdateCubeSatSolarPanelSideInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateCubeSatSolarPanelSideInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
