// Code generated by go-swagger; DO NOT EDIT.

package definition

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BoardComputingModule board computing module
//
// swagger:model BoardComputingModule
type BoardComputingModule struct {

	// Creation timestamp
	CreatedAt int64 `json:"created_at,omitempty"`

	// data bus
	DataBus string `json:"data_bus,omitempty"`

	// Height in meters
	Height float64 `json:"height,omitempty"`

	// Unique identifier for the Board Computing Module
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// Communication interface
	Interface string `json:"interface,omitempty"`

	// Length in meters
	Length float64 `json:"length,omitempty"`

	// Maximum operating temperature in Celsius
	MaxOperatingTemperature float64 `json:"max_operating_temperature,omitempty"`

	// Supply voltage in volts
	MaxSupplyVoltage float64 `json:"max_supply_voltage,omitempty"`

	// Mechanical shock rating
	MechanicalShock int64 `json:"mechanical_shock,omitempty"`

	// Mechanical vibration rating
	MechanicalVibration int64 `json:"mechanical_vibration,omitempty"`

	// Minimum operating temperature in Celsius
	MinOperatingTemperature float64 `json:"min_operating_temperature,omitempty"`

	// Supply voltage in volts
	MinSupplyVoltage float64 `json:"min_supply_voltage,omitempty"`

	// Name of the Board Computing Module
	Name string `json:"name,omitempty"`

	// Power consumption in watts
	PowerConsumption float64 `json:"power_consumption,omitempty"`

	// Last update timestamp
	UpdatedAt int64 `json:"updated_at,omitempty"`

	// Weight in kilograms
	Weight float64 `json:"weight,omitempty"`

	// Width in meters
	Width float64 `json:"width,omitempty"`
}

// Validate validates this board computing module
func (m *BoardComputingModule) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this board computing module based on the context it is used
func (m *BoardComputingModule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BoardComputingModule) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BoardComputingModule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BoardComputingModule) UnmarshalBinary(b []byte) error {
	var res BoardComputingModule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
