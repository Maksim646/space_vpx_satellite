// Code generated by go-swagger; DO NOT EDIT.

package definition

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Chassis chassis
//
// swagger:model Chassis
type Chassis struct {

	// Number of axes
	// Required: true
	Axes *int64 `json:"axes"`

	// Timestamp of creation
	CreatedAt int64 `json:"created_at,omitempty"`

	// Height of the chassis
	// Required: true
	Height *float64 `json:"height"`

	// Unique identifier for the chassis (auto-generated)
	ID int64 `json:"id,omitempty"`

	// Length of the chassis
	// Required: true
	Length *float64 `json:"length"`

	// Maximum non-operating temperature in degrees Celsius
	// Required: true
	MaxNonOperatingTemperature *float64 `json:"max_non_operating_temperature"`

	// Maximum operating temperature in degrees Celsius
	// Required: true
	MaxOperatingTemperature *float64 `json:"max_operating_temperature"`

	// Maximum random vibration
	// Required: true
	MaxVibrationRandom *float64 `json:"max_vibration_random"`

	// Maximum sine vibration
	// Required: true
	MaxVibrationSine *float64 `json:"max_vibration_sine"`

	// Minimum non-operating temperature in degrees Celsius
	// Required: true
	MinNonOperatingTemperature *float64 `json:"min_non_operating_temperature"`

	// Minimum operating temperature in degrees Celsius
	// Required: true
	MinOperatingTemperature *float64 `json:"min_operating_temperature"`

	// Minimum random vibration
	// Required: true
	MinVibrationRandom *float64 `json:"min_vibration_random"`

	// Minimum sine vibration
	// Required: true
	MinVibrationSine *float64 `json:"min_vibration_sine"`

	// Name of the chassis
	// Required: true
	Name *string `json:"name"`

	// Overload capacity
	// Required: true
	Overload *float64 `json:"overload"`

	// Peak frequency spectrum value 1
	// Required: true
	PeakFrequencySpectrum1 *float64 `json:"peak_frequency_spectrum_1"`

	// Peak frequency spectrum value 2
	// Required: true
	PeakFrequencySpectrum2 *float64 `json:"peak_frequency_spectrum_2"`

	// Peak overload spectrum value 1
	// Required: true
	PeakOverloadSpectrum1 *float64 `json:"peak_overload_spectrum_1"`

	// Peak overload spectrum value 2
	// Required: true
	PeakOverloadSpectrum2 *float64 `json:"peak_overload_spectrum_2"`

	// Power handling capability per board
	// Required: true
	PowerHandlingCapabilityPerBoard *float64 `json:"power_handling_capability_per_board"`

	// Shock response spectrum value
	// Required: true
	ShockResponseSpectrum *float64 `json:"shock_response_spectrum"`

	// Size of the chassis
	// Required: true
	Size *string `json:"size"`

	// Number of slots in the chassis
	// Required: true
	Slots *int64 `json:"slots"`

	// Temperature per board
	// Required: true
	TemperaturePerBoard *float64 `json:"temperature_per_board"`

	// Timestamp of the last update
	UpdatedAt int64 `json:"updated_at,omitempty"`

	// Weight of the chassis
	// Required: true
	Weight *float64 `json:"weight"`

	// Width of the chassis
	// Required: true
	Width *float64 `json:"width"`
}

// Validate validates this chassis
func (m *Chassis) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAxes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxNonOperatingTemperature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxOperatingTemperature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxVibrationRandom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxVibrationSine(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinNonOperatingTemperature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinOperatingTemperature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinVibrationRandom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinVibrationSine(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeakFrequencySpectrum1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeakFrequencySpectrum2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeakOverloadSpectrum1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeakOverloadSpectrum2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowerHandlingCapabilityPerBoard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShockResponseSpectrum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemperaturePerBoard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWidth(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Chassis) validateAxes(formats strfmt.Registry) error {

	if err := validate.Required("axes", "body", m.Axes); err != nil {
		return err
	}

	return nil
}

func (m *Chassis) validateHeight(formats strfmt.Registry) error {

	if err := validate.Required("height", "body", m.Height); err != nil {
		return err
	}

	return nil
}

func (m *Chassis) validateLength(formats strfmt.Registry) error {

	if err := validate.Required("length", "body", m.Length); err != nil {
		return err
	}

	return nil
}

func (m *Chassis) validateMaxNonOperatingTemperature(formats strfmt.Registry) error {

	if err := validate.Required("max_non_operating_temperature", "body", m.MaxNonOperatingTemperature); err != nil {
		return err
	}

	return nil
}

func (m *Chassis) validateMaxOperatingTemperature(formats strfmt.Registry) error {

	if err := validate.Required("max_operating_temperature", "body", m.MaxOperatingTemperature); err != nil {
		return err
	}

	return nil
}

func (m *Chassis) validateMaxVibrationRandom(formats strfmt.Registry) error {

	if err := validate.Required("max_vibration_random", "body", m.MaxVibrationRandom); err != nil {
		return err
	}

	return nil
}

func (m *Chassis) validateMaxVibrationSine(formats strfmt.Registry) error {

	if err := validate.Required("max_vibration_sine", "body", m.MaxVibrationSine); err != nil {
		return err
	}

	return nil
}

func (m *Chassis) validateMinNonOperatingTemperature(formats strfmt.Registry) error {

	if err := validate.Required("min_non_operating_temperature", "body", m.MinNonOperatingTemperature); err != nil {
		return err
	}

	return nil
}

func (m *Chassis) validateMinOperatingTemperature(formats strfmt.Registry) error {

	if err := validate.Required("min_operating_temperature", "body", m.MinOperatingTemperature); err != nil {
		return err
	}

	return nil
}

func (m *Chassis) validateMinVibrationRandom(formats strfmt.Registry) error {

	if err := validate.Required("min_vibration_random", "body", m.MinVibrationRandom); err != nil {
		return err
	}

	return nil
}

func (m *Chassis) validateMinVibrationSine(formats strfmt.Registry) error {

	if err := validate.Required("min_vibration_sine", "body", m.MinVibrationSine); err != nil {
		return err
	}

	return nil
}

func (m *Chassis) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Chassis) validateOverload(formats strfmt.Registry) error {

	if err := validate.Required("overload", "body", m.Overload); err != nil {
		return err
	}

	return nil
}

func (m *Chassis) validatePeakFrequencySpectrum1(formats strfmt.Registry) error {

	if err := validate.Required("peak_frequency_spectrum_1", "body", m.PeakFrequencySpectrum1); err != nil {
		return err
	}

	return nil
}

func (m *Chassis) validatePeakFrequencySpectrum2(formats strfmt.Registry) error {

	if err := validate.Required("peak_frequency_spectrum_2", "body", m.PeakFrequencySpectrum2); err != nil {
		return err
	}

	return nil
}

func (m *Chassis) validatePeakOverloadSpectrum1(formats strfmt.Registry) error {

	if err := validate.Required("peak_overload_spectrum_1", "body", m.PeakOverloadSpectrum1); err != nil {
		return err
	}

	return nil
}

func (m *Chassis) validatePeakOverloadSpectrum2(formats strfmt.Registry) error {

	if err := validate.Required("peak_overload_spectrum_2", "body", m.PeakOverloadSpectrum2); err != nil {
		return err
	}

	return nil
}

func (m *Chassis) validatePowerHandlingCapabilityPerBoard(formats strfmt.Registry) error {

	if err := validate.Required("power_handling_capability_per_board", "body", m.PowerHandlingCapabilityPerBoard); err != nil {
		return err
	}

	return nil
}

func (m *Chassis) validateShockResponseSpectrum(formats strfmt.Registry) error {

	if err := validate.Required("shock_response_spectrum", "body", m.ShockResponseSpectrum); err != nil {
		return err
	}

	return nil
}

func (m *Chassis) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *Chassis) validateSlots(formats strfmt.Registry) error {

	if err := validate.Required("slots", "body", m.Slots); err != nil {
		return err
	}

	return nil
}

func (m *Chassis) validateTemperaturePerBoard(formats strfmt.Registry) error {

	if err := validate.Required("temperature_per_board", "body", m.TemperaturePerBoard); err != nil {
		return err
	}

	return nil
}

func (m *Chassis) validateWeight(formats strfmt.Registry) error {

	if err := validate.Required("weight", "body", m.Weight); err != nil {
		return err
	}

	return nil
}

func (m *Chassis) validateWidth(formats strfmt.Registry) error {

	if err := validate.Required("width", "body", m.Width); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this chassis based on context it is used
func (m *Chassis) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Chassis) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Chassis) UnmarshalBinary(b []byte) error {
	var res Chassis
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
