// Code generated by go-swagger; DO NOT EDIT.

package definition

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SolarPanelTop solar panel top
//
// swagger:model SolarPanelTop
type SolarPanelTop struct {

	// Area of the coil
	CoilArea float64 `json:"coil_area,omitempty"`

	// Coil resistance value
	CoilResistance float64 `json:"coil_resistance,omitempty"`

	// Timestamp of creation
	CreatedAt int64 `json:"created_at,omitempty"`

	// Efficiency percentage
	Efficiency float64 `json:"efficiency,omitempty"`

	// Height of the solar panel top
	Height float64 `json:"height,omitempty"`

	// Unique identifier for the solar panel top (auto-generated)
	// Required: true
	ID *int64 `json:"id"`

	// Current at maximum power
	Imp float64 `json:"imp,omitempty"`

	// Interface type of the solar panel top
	Interface string `json:"interface,omitempty"`

	// Short circuit current
	Isc float64 `json:"isc,omitempty"`

	// Length of the solar panel top
	Length float64 `json:"length,omitempty"`

	// Maximum operating temperature in degrees Celsius
	MaxOperatingTemperature float64 `json:"max_operating_temperature,omitempty"`

	// Mechanical shock value
	MechanicalShock float64 `json:"mechanical_shock,omitempty"`

	// Mechanical vibration value
	MechanicalVibration float64 `json:"mechanical_vibration,omitempty"`

	// Minimum operating temperature in degrees Celsius
	MinOperatingTemperature float64 `json:"min_operating_temperature,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// Timestamp of the last update
	UpdatedAt int64 `json:"updated_at,omitempty"`

	// Voltage at maximum power
	Vmp float64 `json:"vmp,omitempty"`

	// Open circuit voltage
	Voc float64 `json:"voc,omitempty"`

	// Weight of the solar panel top
	Weight float64 `json:"weight,omitempty"`

	// Width of the solar panel top
	Width float64 `json:"width,omitempty"`
}

// Validate validates this solar panel top
func (m *SolarPanelTop) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SolarPanelTop) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this solar panel top based on context it is used
func (m *SolarPanelTop) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SolarPanelTop) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SolarPanelTop) UnmarshalBinary(b []byte) error {
	var res SolarPanelTop
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
