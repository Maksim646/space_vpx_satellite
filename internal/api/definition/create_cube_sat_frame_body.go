// Code generated by go-swagger; DO NOT EDIT.

package definition

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateCubeSatFrameBody create cube sat frame body
//
// swagger:model CreateCubeSatFrameBody
type CreateCubeSatFrameBody struct {

	// height
	// Required: true
	Height *float64 `json:"height"`

	// length
	// Required: true
	Length *float64 `json:"length"`

	// link
	// Required: true
	Link *string `json:"link"`

	// mechanical shock
	// Required: true
	MechanicalShock *int64 `json:"mechanical_shock"`

	// mechanical vibration
	// Required: true
	MechanicalVibration *int64 `json:"mechanical_vibration"`

	// operating temperature max
	// Required: true
	OperatingTemperatureMax *int64 `json:"operating_temperature_max"`

	// operating temperature min
	// Required: true
	OperatingTemperatureMin *int64 `json:"operating_temperature_min"`

	// weight
	// Required: true
	Weight *int64 `json:"weight"`

	// width
	// Required: true
	Width *float64 `json:"width"`
}

// Validate validates this create cube sat frame body
func (m *CreateCubeSatFrameBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMechanicalShock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMechanicalVibration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatingTemperatureMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatingTemperatureMin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWidth(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateCubeSatFrameBody) validateHeight(formats strfmt.Registry) error {

	if err := validate.Required("height", "body", m.Height); err != nil {
		return err
	}

	return nil
}

func (m *CreateCubeSatFrameBody) validateLength(formats strfmt.Registry) error {

	if err := validate.Required("length", "body", m.Length); err != nil {
		return err
	}

	return nil
}

func (m *CreateCubeSatFrameBody) validateLink(formats strfmt.Registry) error {

	if err := validate.Required("link", "body", m.Link); err != nil {
		return err
	}

	return nil
}

func (m *CreateCubeSatFrameBody) validateMechanicalShock(formats strfmt.Registry) error {

	if err := validate.Required("mechanical_shock", "body", m.MechanicalShock); err != nil {
		return err
	}

	return nil
}

func (m *CreateCubeSatFrameBody) validateMechanicalVibration(formats strfmt.Registry) error {

	if err := validate.Required("mechanical_vibration", "body", m.MechanicalVibration); err != nil {
		return err
	}

	return nil
}

func (m *CreateCubeSatFrameBody) validateOperatingTemperatureMax(formats strfmt.Registry) error {

	if err := validate.Required("operating_temperature_max", "body", m.OperatingTemperatureMax); err != nil {
		return err
	}

	return nil
}

func (m *CreateCubeSatFrameBody) validateOperatingTemperatureMin(formats strfmt.Registry) error {

	if err := validate.Required("operating_temperature_min", "body", m.OperatingTemperatureMin); err != nil {
		return err
	}

	return nil
}

func (m *CreateCubeSatFrameBody) validateWeight(formats strfmt.Registry) error {

	if err := validate.Required("weight", "body", m.Weight); err != nil {
		return err
	}

	return nil
}

func (m *CreateCubeSatFrameBody) validateWidth(formats strfmt.Registry) error {

	if err := validate.Required("width", "body", m.Width); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create cube sat frame body based on context it is used
func (m *CreateCubeSatFrameBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateCubeSatFrameBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateCubeSatFrameBody) UnmarshalBinary(b []byte) error {
	var res CreateCubeSatFrameBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
