// Code generated by go-swagger; DO NOT EDIT.

package definition

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CubeSatPowerSystem cube sat power system
//
// swagger:model CubeSatPowerSystem
type CubeSatPowerSystem struct {

	// Timestamp of creation
	CreatedAt int64 `json:"created_at,omitempty"`

	// Maximum current for output channels
	CurrentOutputChannelsMax float64 `json:"current_output_channels_max,omitempty"`

	// Data interface type
	DataInterface string `json:"data_interface,omitempty"`

	// Height of the power system
	Height float64 `json:"height,omitempty"`

	// Unique identifier for the power system (auto-generated)
	// Required: true
	ID *int64 `json:"id"`

	// Length of the power system
	Length float64 `json:"length,omitempty"`

	// Maximum operating temperature in degrees Celsius
	MaxOperatingTemperature float64 `json:"max_operating_temperature,omitempty"`

	// System bus voltage for output channels
	MaxSystemBusVoltageOutputChannels float64 `json:"max_system_bus_voltage_output_channels,omitempty"`

	// Mechanical shock value
	MechanicalShock int64 `json:"mechanical_shock,omitempty"`

	// Mechanical vibration value
	MechanicalVibration int64 `json:"mechanical_vibration,omitempty"`

	// Minimum operating temperature in degrees Celsius
	MinOperatingTemperature float64 `json:"min_operating_temperature,omitempty"`

	// System bus voltage for output channels
	MinSystemBusVoltageOutputChannels float64 `json:"min_system_bus_voltage_output_channels,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// Number of output channels
	OutputChannels int64 `json:"output_channels,omitempty"`

	// Number of solar panel channels
	SolarPanelChannels int64 `json:"solar_panel_channels,omitempty"`

	// Maximum current per solar panel channel
	SolarPanelCurrentPerChannelMax float64 `json:"solar_panel_current_per_channel_max,omitempty"`

	// Maximum voltage of the solar panels
	SolarPanelVoltageMax float64 `json:"solar_panel_voltage_max,omitempty"`

	// Minimum voltage of the solar panels
	SolarPanelVoltageMin float64 `json:"solar_panel_voltage_min,omitempty"`

	// Type of solar panels used
	SolarPanelsType string `json:"solar_panels_type,omitempty"`

	// System bus voltage for solar panels
	SystemBusVoltageSolarPanels float64 `json:"system_bus_voltage_solar_panels,omitempty"`

	// Maximum total current of solar panels
	TotalCurrentOfSolarPanelsMax float64 `json:"total_current_of_solar_panels_max,omitempty"`

	// Total output current
	TotalOutputCurrent float64 `json:"total_output_current,omitempty"`

	// Timestamp of the last update
	UpdatedAt int64 `json:"updated_at,omitempty"`

	// Weight of the power system
	Weight float64 `json:"weight,omitempty"`

	// Width of the power system
	Width float64 `json:"width,omitempty"`
}

// Validate validates this cube sat power system
func (m *CubeSatPowerSystem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CubeSatPowerSystem) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cube sat power system based on context it is used
func (m *CubeSatPowerSystem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CubeSatPowerSystem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CubeSatPowerSystem) UnmarshalBinary(b []byte) error {
	var res CubeSatPowerSystem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
