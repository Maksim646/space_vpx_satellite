// Code generated by go-swagger; DO NOT EDIT.

package definition

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CubeSatSolarPanelsSide cube sat solar panels side
//
// swagger:model CubeSatSolarPanelsSide
type CubeSatSolarPanelsSide struct {

	// count
	// Required: true
	Count *int64 `json:"count"`

	// cube sat solar panels side
	CubeSatSolarPanelsSide []*SolarPanelSide `json:"cube_sat_solar_panels_side"`
}

// Validate validates this cube sat solar panels side
func (m *CubeSatSolarPanelsSide) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCubeSatSolarPanelsSide(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CubeSatSolarPanelsSide) validateCount(formats strfmt.Registry) error {

	if err := validate.Required("count", "body", m.Count); err != nil {
		return err
	}

	return nil
}

func (m *CubeSatSolarPanelsSide) validateCubeSatSolarPanelsSide(formats strfmt.Registry) error {
	if swag.IsZero(m.CubeSatSolarPanelsSide) { // not required
		return nil
	}

	for i := 0; i < len(m.CubeSatSolarPanelsSide); i++ {
		if swag.IsZero(m.CubeSatSolarPanelsSide[i]) { // not required
			continue
		}

		if m.CubeSatSolarPanelsSide[i] != nil {
			if err := m.CubeSatSolarPanelsSide[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cube_sat_solar_panels_side" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cube_sat_solar_panels_side" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cube sat solar panels side based on the context it is used
func (m *CubeSatSolarPanelsSide) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCubeSatSolarPanelsSide(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CubeSatSolarPanelsSide) contextValidateCubeSatSolarPanelsSide(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CubeSatSolarPanelsSide); i++ {

		if m.CubeSatSolarPanelsSide[i] != nil {

			if swag.IsZero(m.CubeSatSolarPanelsSide[i]) { // not required
				return nil
			}

			if err := m.CubeSatSolarPanelsSide[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cube_sat_solar_panels_side" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cube_sat_solar_panels_side" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CubeSatSolarPanelsSide) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CubeSatSolarPanelsSide) UnmarshalBinary(b []byte) error {
	var res CubeSatSolarPanelsSide
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
