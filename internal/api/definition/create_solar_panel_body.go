// Code generated by go-swagger; DO NOT EDIT.

package definition

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateSolarPanelBody create solar panel body
//
// swagger:model CreateSolarPanelBody
type CreateSolarPanelBody struct {

	// Number of axes
	CoilArea float64 `json:"coil_area,omitempty"`

	// Shock response spectrum value
	CoilResistance int64 `json:"coil_resistance,omitempty"`

	// Timestamp of creation
	CreatedAt int64 `json:"created_at,omitempty"`

	// Minimum random vibration
	Efficiency int64 `json:"efficiency,omitempty"`

	// Size of the chassis
	// Required: true
	Height *float64 `json:"height"`

	// Maximum random vibration
	Imp float64 `json:"imp,omitempty"`

	// Minimum non-operating temperature in degrees Celsius
	Interface string `json:"interface,omitempty"`

	// Maximum sine vibration
	Isc float64 `json:"isc,omitempty"`

	// Name of the chassis
	// Required: true
	Length *float64 `json:"length"`

	// Maximum operating temperature in degrees Celsius
	MaxOperatingTemperature float64 `json:"max_operating_temperature,omitempty"`

	// Peak overload spectrum value 2
	MechanicalShock int64 `json:"mechanical_shock,omitempty"`

	// Peak overload spectrum value 1
	MechanicalVibration int64 `json:"mechanical_vibration,omitempty"`

	// Minimum operating temperature in degrees Celsius
	MinOperatingTemperature float64 `json:"min_operating_temperature,omitempty"`

	// Timestamp of the last update
	UpdatedAt int64 `json:"updated_at,omitempty"`

	// Minimum sine vibration
	Vmp float64 `json:"vmp,omitempty"`

	// Overload capacity
	Voc float64 `json:"voc,omitempty"`

	// Maximum non-operating temperature in degrees Celsius
	Weight float64 `json:"weight,omitempty"`

	// Number of slots in the chassis
	// Required: true
	Width *float64 `json:"width"`
}

// Validate validates this create solar panel body
func (m *CreateSolarPanelBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWidth(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateSolarPanelBody) validateHeight(formats strfmt.Registry) error {

	if err := validate.Required("height", "body", m.Height); err != nil {
		return err
	}

	return nil
}

func (m *CreateSolarPanelBody) validateLength(formats strfmt.Registry) error {

	if err := validate.Required("length", "body", m.Length); err != nil {
		return err
	}

	return nil
}

func (m *CreateSolarPanelBody) validateWidth(formats strfmt.Registry) error {

	if err := validate.Required("width", "body", m.Width); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create solar panel body based on context it is used
func (m *CreateSolarPanelBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateSolarPanelBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateSolarPanelBody) UnmarshalBinary(b []byte) error {
	var res CreateSolarPanelBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
